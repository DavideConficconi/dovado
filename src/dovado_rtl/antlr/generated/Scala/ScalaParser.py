# Generated from Scala.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3P")
        buf.write("\u05a6\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\3\2\5\2\u00d8\n\2\3\2\3\2\5\2\u00dc")
        buf.write("\n\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u00e4\n\2\3\3\3\3\3\3")
        buf.write("\7\3\u00e9\n\3\f\3\16\3\u00ec\13\3\3\4\3\4\3\4\7\4\u00f1")
        buf.write("\n\4\f\4\16\4\u00f4\13\4\3\5\3\5\3\5\3\5\5\5\u00fa\n\5")
        buf.write("\3\5\3\5\3\5\5\5\u00ff\n\5\3\5\3\5\5\5\u0103\n\5\5\5\u0105")
        buf.write("\n\5\3\5\3\5\3\5\7\5\u010a\n\5\f\5\16\5\u010d\13\5\3\6")
        buf.write("\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0119\n\7\5\7")
        buf.write("\u011b\n\7\3\b\3\b\3\b\3\b\3\b\7\b\u0122\n\b\f\b\16\b")
        buf.write("\u0125\13\b\5\b\u0127\n\b\3\b\5\b\u012a\n\b\3\t\3\t\3")
        buf.write("\t\6\t\u012f\n\t\r\t\16\t\u0130\3\t\3\t\3\n\3\n\3\n\3")
        buf.write("\n\5\n\u0139\n\n\3\13\3\13\3\13\7\13\u013e\n\13\f\13\16")
        buf.write("\13\u0141\13\13\3\f\3\f\3\f\7\f\u0146\n\f\f\f\16\f\u0149")
        buf.write("\13\f\3\f\5\f\u014c\n\f\3\f\5\f\u014f\n\f\3\r\3\r\7\r")
        buf.write("\u0153\n\r\f\r\16\r\u0156\13\r\3\16\3\16\3\16\3\16\5\16")
        buf.write("\u015c\n\16\3\16\3\16\3\16\3\16\5\16\u0162\n\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\7\16\u0169\n\16\f\16\16\16\u016c\13")
        buf.write("\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\7\20\u0175\n\20")
        buf.write("\f\20\16\20\u0178\13\20\3\21\5\21\u017b\n\21\3\21\3\21")
        buf.write("\6\21\u017f\n\21\r\21\16\21\u0180\3\21\3\21\3\22\3\22")
        buf.write("\3\22\5\22\u0188\n\22\3\23\3\23\3\24\3\24\3\24\3\24\6")
        buf.write("\24\u0190\n\24\r\24\16\24\u0191\3\24\3\24\3\24\5\24\u0197")
        buf.write("\n\24\3\25\3\25\5\25\u019b\n\25\3\25\3\25\5\25\u019f\n")
        buf.write("\25\3\25\3\25\3\25\5\25\u01a4\n\25\3\26\3\26\3\26\3\26")
        buf.write("\3\26\7\26\u01ab\n\26\f\26\16\26\u01ae\13\26\3\26\3\26")
        buf.write("\3\26\5\26\u01b3\n\26\3\26\3\26\3\26\3\26\3\26\7\26\u01ba")
        buf.write("\n\26\f\26\16\26\u01bd\13\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\5\26\u01c5\n\26\3\26\3\26\5\26\u01c9\n\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\5\26\u01db\n\26\3\26\5\26\u01de\n")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u01e6\n\26\3\26")
        buf.write("\3\26\3\26\5\26\u01eb\n\26\5\26\u01ed\n\26\3\26\3\26\5")
        buf.write("\26\u01f1\n\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u01fd\n\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\5\26\u0205\n\26\3\27\3\27\3\30\3\30\5\30\u020b\n\30")
        buf.write("\3\30\3\30\3\30\7\30\u0210\n\30\f\30\16\30\u0213\13\30")
        buf.write("\3\30\5\30\u0216\n\30\3\31\3\31\3\31\3\31\3\31\3\31\5")
        buf.write("\31\u021e\n\31\3\31\7\31\u0221\n\31\f\31\16\31\u0224\13")
        buf.write("\31\3\32\5\32\u0227\n\32\3\32\3\32\3\32\5\32\u022c\n\32")
        buf.write("\5\32\u022e\n\32\3\33\3\33\3\33\5\33\u0233\n\33\3\33\5")
        buf.write("\33\u0236\n\33\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u023e")
        buf.write("\n\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0248")
        buf.write("\n\34\3\34\3\34\5\34\u024c\n\34\3\34\3\34\3\34\3\34\5")
        buf.write("\34\u0252\n\34\3\34\3\34\3\34\7\34\u0257\n\34\f\34\16")
        buf.write("\34\u025a\13\34\3\35\3\35\3\35\7\35\u025f\n\35\f\35\16")
        buf.write("\35\u0262\13\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\5\36\u026d\n\36\3\36\5\36\u0270\n\36\3\37\5\37\u0273")
        buf.write("\n\37\3\37\3\37\3\37\5\37\u0278\n\37\3\37\3\37\5\37\u027c")
        buf.write("\n\37\5\37\u027e\n\37\3 \3 \3 \3 \3 \3 \3 \3 \5 \u0288")
        buf.write("\n \3!\6!\u028b\n!\r!\16!\u028c\3!\5!\u0290\n!\3\"\3\"")
        buf.write("\7\"\u0294\n\"\f\"\16\"\u0297\13\"\3\"\5\"\u029a\n\"\3")
        buf.write("\"\3\"\7\"\u029e\n\"\f\"\16\"\u02a1\13\"\3\"\7\"\u02a4")
        buf.write("\n\"\f\"\16\"\u02a7\13\"\3\"\3\"\5\"\u02ab\n\"\3#\3#\3")
        buf.write("#\5#\u02b0\n#\3#\3#\5#\u02b4\n#\3#\3#\5#\u02b8\n#\3#\3")
        buf.write("#\3#\5#\u02bd\n#\3$\6$\u02c0\n$\r$\16$\u02c1\3%\3%\3%")
        buf.write("\3%\3%\3%\3%\3%\7%\u02cc\n%\f%\16%\u02cf\13%\3&\6&\u02d2")
        buf.write("\n&\r&\16&\u02d3\3\'\3\'\3\'\5\'\u02d9\n\'\3\'\3\'\3\'")
        buf.write("\3(\3(\3(\3)\3)\3)\7)\u02e4\n)\f)\16)\u02e7\13)\3*\3*")
        buf.write("\3*\3*\5*\u02ed\n*\3+\3+\3+\5+\u02f2\n+\3+\5+\u02f5\n")
        buf.write("+\3,\3,\3,\3,\5,\u02fb\n,\3,\7,\u02fe\n,\f,\16,\u0301")
        buf.write("\13,\5,\u0303\n,\3-\3-\3-\3-\3-\3-\5-\u030b\n-\3-\5-\u030e")
        buf.write("\n-\3-\3-\3-\3-\3-\5-\u0315\n-\3-\3-\5-\u0319\n-\3-\3")
        buf.write("-\3-\3-\3-\3-\5-\u0321\n-\3-\5-\u0324\n-\3.\3.\3.\5.\u0329")
        buf.write("\n.\3.\3.\5.\u032d\n.\3/\3/\3/\3/\7/\u0333\n/\f/\16/\u0336")
        buf.write("\13/\3/\3/\3\60\3\60\3\60\3\60\7\60\u033e\n\60\f\60\16")
        buf.write("\60\u0341\13\60\3\60\3\60\3\61\7\61\u0346\n\61\f\61\16")
        buf.write("\61\u0349\13\61\3\61\5\61\u034c\n\61\3\61\3\61\3\62\3")
        buf.write("\62\5\62\u0352\n\62\3\62\3\62\5\62\u0356\n\62\3\62\3\62")
        buf.write("\5\62\u035a\n\62\3\62\3\62\7\62\u035e\n\62\f\62\16\62")
        buf.write("\u0361\13\62\3\62\3\62\7\62\u0365\n\62\f\62\16\62\u0368")
        buf.write("\13\62\3\63\7\63\u036b\n\63\f\63\16\63\u036e\13\63\3\63")
        buf.write("\5\63\u0371\n\63\3\63\3\63\3\63\3\63\3\63\5\63\u0378\n")
        buf.write("\63\3\64\5\64\u037b\n\64\3\64\3\64\5\64\u037f\n\64\3\64")
        buf.write("\3\64\3\65\3\65\3\65\7\65\u0386\n\65\f\65\16\65\u0389")
        buf.write("\13\65\3\66\7\66\u038c\n\66\f\66\16\66\u038f\13\66\3\66")
        buf.write("\3\66\3\66\5\66\u0394\n\66\3\66\3\66\5\66\u0398\n\66\3")
        buf.write("\67\3\67\3\67\3\67\3\67\3\67\5\67\u03a0\n\67\38\78\u03a3")
        buf.write("\n8\f8\168\u03a6\138\38\58\u03a9\n8\38\38\38\38\38\58")
        buf.write("\u03b0\n8\39\59\u03b3\n9\39\39\59\u03b7\n9\39\39\3:\3")
        buf.write(":\3:\7:\u03be\n:\f:\16:\u03c1\13:\3;\7;\u03c4\n;\f;\16")
        buf.write(";\u03c7\13;\3;\7;\u03ca\n;\f;\16;\u03cd\13;\3;\5;\u03d0")
        buf.write("\n;\3;\3;\3;\3;\3;\5;\u03d7\n;\3<\3<\3<\3<\7<\u03dd\n")
        buf.write("<\f<\16<\u03e0\13<\3<\3<\3=\3=\3=\5=\u03e7\n=\3>\3>\3")
        buf.write(">\5>\u03ec\n>\3?\3?\3@\3@\5@\u03f2\n@\3A\3A\3A\3A\3B\3")
        buf.write("B\3B\7B\u03fb\nB\fB\16B\u03fe\13B\3C\3C\3C\3C\3D\5D\u0405")
        buf.write("\nD\3D\3D\5D\u0409\nD\3D\6D\u040c\nD\rD\16D\u040d\3D\3")
        buf.write("D\3E\3E\3E\5E\u0415\nE\7E\u0417\nE\fE\16E\u041a\13E\3")
        buf.write("E\7E\u041d\nE\fE\16E\u0420\13E\3E\3E\3E\5E\u0425\nE\7")
        buf.write("E\u0427\nE\fE\16E\u042a\13E\3E\7E\u042d\nE\fE\16E\u0430")
        buf.write("\13E\3E\3E\5E\u0434\nE\3F\3F\3F\5F\u0439\nF\3F\3F\3F\3")
        buf.write("F\3F\3F\5F\u0441\nF\3G\3G\3G\3G\7G\u0447\nG\fG\16G\u044a")
        buf.write("\13G\3H\3H\3H\3H\3H\5H\u0451\nH\5H\u0453\nH\3I\3I\3I\3")
        buf.write("I\7I\u0459\nI\fI\16I\u045c\13I\3I\3I\5I\u0460\nI\3I\3")
        buf.write("I\3J\3J\3J\5J\u0467\nJ\3K\3K\3K\3K\3K\3K\3K\3K\7K\u0471")
        buf.write("\nK\fK\16K\u0474\13K\3K\5K\u0477\nK\3L\3L\3L\3L\3M\3M")
        buf.write("\3M\3M\3N\3N\3N\5N\u0484\nN\3O\3O\5O\u0488\nO\3O\3O\3")
        buf.write("P\3P\5P\u048e\nP\3P\3P\5P\u0492\nP\3P\3P\5P\u0496\nP\3")
        buf.write("Q\3Q\3Q\3Q\5Q\u049c\nQ\3R\3R\3R\3R\3R\7R\u04a3\nR\fR\16")
        buf.write("R\u04a6\13R\3R\3R\5R\u04aa\nR\3S\3S\3S\7S\u04af\nS\fS")
        buf.write("\16S\u04b2\13S\3S\3S\5S\u04b6\nS\3S\3S\3S\3T\3T\3T\3T")
        buf.write("\3T\3T\3T\5T\u04c2\nT\3U\3U\3U\5U\u04c7\nU\3U\3U\3U\3")
        buf.write("U\3U\5U\u04ce\nU\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u04da")
        buf.write("\nU\3U\5U\u04dd\nU\5U\u04df\nU\3V\3V\5V\u04e3\nV\3V\3")
        buf.write("V\3V\3W\5W\u04e9\nW\3W\3W\3W\5W\u04ee\nW\3W\3W\3W\3W\5")
        buf.write("W\u04f4\nW\3X\3X\5X\u04f8\nX\3X\7X\u04fb\nX\fX\16X\u04fe")
        buf.write("\13X\3X\5X\u0501\nX\3X\3X\3X\3Y\3Y\5Y\u0508\nY\3Y\3Y\3")
        buf.write("Z\3Z\3Z\3[\3[\3[\5[\u0512\n[\3[\5[\u0515\n[\5[\u0517\n")
        buf.write("[\3\\\3\\\3\\\5\\\u051c\n\\\3\\\5\\\u051f\n\\\5\\\u0521")
        buf.write("\n\\\3]\5]\u0524\n]\3]\3]\5]\u0528\n]\3^\5^\u052b\n^\3")
        buf.write("^\3^\5^\u052f\n^\3_\3_\3_\7_\u0534\n_\f_\16_\u0537\13")
        buf.write("_\3`\3`\3`\7`\u053c\n`\f`\16`\u053f\13`\3a\3a\7a\u0543")
        buf.write("\na\fa\16a\u0546\13a\3b\3b\6b\u054a\nb\rb\16b\u054b\3")
        buf.write("b\3b\3b\3c\3c\5c\u0553\nc\7c\u0555\nc\fc\16c\u0558\13")
        buf.write("c\3c\7c\u055b\nc\fc\16c\u055e\13c\3c\3c\3d\3d\5d\u0564")
        buf.write("\nd\3e\3e\3e\7e\u0569\ne\fe\16e\u056c\13e\3e\3e\3f\3f")
        buf.write("\6f\u0572\nf\rf\16f\u0573\3g\6g\u0577\ng\rg\16g\u0578")
        buf.write("\3h\3h\5h\u057d\nh\7h\u057f\nh\fh\16h\u0582\13h\3h\7h")
        buf.write("\u0585\nh\fh\16h\u0588\13h\3h\3h\3h\3h\5h\u058e\nh\3i")
        buf.write("\3i\3i\5i\u0593\ni\3i\3i\3i\3i\3j\3j\3j\3j\3k\3k\7k\u059f")
        buf.write("\nk\fk\16k\u05a2\13k\3k\3k\3k\2\6\b\32\60\66l\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\2\f\4\2\3\3&(\3\2\25\27\4\2\30")
        buf.write("\30**\5\2\26\26@@HH\4\2\3\3&&\4\2\26\26@@\4\2\22\22\62")
        buf.write("\62\5\2\30\30**\64\66\3\2\678\4\2\7\7@@\2\u0634\2\u00e3")
        buf.write("\3\2\2\2\4\u00e5\3\2\2\2\6\u00ed\3\2\2\2\b\u0104\3\2\2")
        buf.write("\2\n\u010e\3\2\2\2\f\u011a\3\2\2\2\16\u0129\3\2\2\2\20")
        buf.write("\u012b\3\2\2\2\22\u0138\3\2\2\2\24\u013a\3\2\2\2\26\u014e")
        buf.write("\3\2\2\2\30\u0150\3\2\2\2\32\u0161\3\2\2\2\34\u016d\3")
        buf.write("\2\2\2\36\u0171\3\2\2\2 \u017a\3\2\2\2\"\u0187\3\2\2\2")
        buf.write("$\u0189\3\2\2\2&\u0196\3\2\2\2(\u01a3\3\2\2\2*\u0204\3")
        buf.write("\2\2\2,\u0206\3\2\2\2.\u0208\3\2\2\2\60\u0217\3\2\2\2")
        buf.write("\62\u0226\3\2\2\2\64\u0235\3\2\2\2\66\u0247\3\2\2\28\u025b")
        buf.write("\3\2\2\2:\u026f\3\2\2\2<\u027d\3\2\2\2>\u0287\3\2\2\2")
        buf.write("@\u028a\3\2\2\2B\u02aa\3\2\2\2D\u02bc\3\2\2\2F\u02bf\3")
        buf.write("\2\2\2H\u02c3\3\2\2\2J\u02d1\3\2\2\2L\u02d5\3\2\2\2N\u02dd")
        buf.write("\3\2\2\2P\u02e0\3\2\2\2R\u02ec\3\2\2\2T\u02f4\3\2\2\2")
        buf.write("V\u0302\3\2\2\2X\u0323\3\2\2\2Z\u032c\3\2\2\2\\\u032e")
        buf.write("\3\2\2\2^\u0339\3\2\2\2`\u0347\3\2\2\2b\u034f\3\2\2\2")
        buf.write("d\u036c\3\2\2\2f\u037a\3\2\2\2h\u0382\3\2\2\2j\u038d\3")
        buf.write("\2\2\2l\u039f\3\2\2\2n\u03a4\3\2\2\2p\u03b2\3\2\2\2r\u03ba")
        buf.write("\3\2\2\2t\u03c5\3\2\2\2v\u03d8\3\2\2\2x\u03e3\3\2\2\2")
        buf.write("z\u03eb\3\2\2\2|\u03ed\3\2\2\2~\u03ef\3\2\2\2\u0080\u03f3")
        buf.write("\3\2\2\2\u0082\u03f7\3\2\2\2\u0084\u03ff\3\2\2\2\u0086")
        buf.write("\u0404\3\2\2\2\u0088\u0433\3\2\2\2\u008a\u0440\3\2\2\2")
        buf.write("\u008c\u0442\3\2\2\2\u008e\u044b\3\2\2\2\u0090\u0454\3")
        buf.write("\2\2\2\u0092\u0463\3\2\2\2\u0094\u0476\3\2\2\2\u0096\u0478")
        buf.write("\3\2\2\2\u0098\u047c\3\2\2\2\u009a\u0480\3\2\2\2\u009c")
        buf.write("\u0485\3\2\2\2\u009e\u048b\3\2\2\2\u00a0\u049b\3\2\2\2")
        buf.write("\u00a2\u04a9\3\2\2\2\u00a4\u04ab\3\2\2\2\u00a6\u04c1\3")
        buf.write("\2\2\2\u00a8\u04de\3\2\2\2\u00aa\u04e0\3\2\2\2\u00ac\u04f3")
        buf.write("\3\2\2\2\u00ae\u04f5\3\2\2\2\u00b0\u0505\3\2\2\2\u00b2")
        buf.write("\u050b\3\2\2\2\u00b4\u0516\3\2\2\2\u00b6\u0520\3\2\2\2")
        buf.write("\u00b8\u0523\3\2\2\2\u00ba\u052a\3\2\2\2\u00bc\u0530\3")
        buf.write("\2\2\2\u00be\u0538\3\2\2\2\u00c0\u0540\3\2\2\2\u00c2\u0547")
        buf.write("\3\2\2\2\u00c4\u0556\3\2\2\2\u00c6\u0563\3\2\2\2\u00c8")
        buf.write("\u0565\3\2\2\2\u00ca\u056f\3\2\2\2\u00cc\u0576\3\2\2\2")
        buf.write("\u00ce\u058d\3\2\2\2\u00d0\u058f\3\2\2\2\u00d2\u0598\3")
        buf.write("\2\2\2\u00d4\u05a0\3\2\2\2\u00d6\u00d8\7\3\2\2\u00d7\u00d6")
        buf.write("\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9")
        buf.write("\u00e4\7D\2\2\u00da\u00dc\7\3\2\2\u00db\u00da\3\2\2\2")
        buf.write("\u00db\u00dc\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00e4\7")
        buf.write("F\2\2\u00de\u00e4\7A\2\2\u00df\u00e4\7B\2\2\u00e0\u00e4")
        buf.write("\7E\2\2\u00e1\u00e4\7C\2\2\u00e2\u00e4\7\4\2\2\u00e3\u00d7")
        buf.write("\3\2\2\2\u00e3\u00db\3\2\2\2\u00e3\u00de\3\2\2\2\u00e3")
        buf.write("\u00df\3\2\2\2\u00e3\u00e0\3\2\2\2\u00e3\u00e1\3\2\2\2")
        buf.write("\u00e3\u00e2\3\2\2\2\u00e4\3\3\2\2\2\u00e5\u00ea\7@\2")
        buf.write("\2\u00e6\u00e7\7\5\2\2\u00e7\u00e9\7@\2\2\u00e8\u00e6")
        buf.write("\3\2\2\2\u00e9\u00ec\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea")
        buf.write("\u00eb\3\2\2\2\u00eb\5\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ed")
        buf.write("\u00f2\7@\2\2\u00ee\u00ef\7\6\2\2\u00ef\u00f1\7@\2\2\u00f0")
        buf.write("\u00ee\3\2\2\2\u00f1\u00f4\3\2\2\2\u00f2\u00f0\3\2\2\2")
        buf.write("\u00f2\u00f3\3\2\2\2\u00f3\7\3\2\2\2\u00f4\u00f2\3\2\2")
        buf.write("\2\u00f5\u00f6\b\5\1\2\u00f6\u0105\7@\2\2\u00f7\u00f8")
        buf.write("\7@\2\2\u00f8\u00fa\7\5\2\2\u00f9\u00f7\3\2\2\2\u00f9")
        buf.write("\u00fa\3\2\2\2\u00fa\u0102\3\2\2\2\u00fb\u0103\7\7\2\2")
        buf.write("\u00fc\u00fe\7\b\2\2\u00fd\u00ff\5\n\6\2\u00fe\u00fd\3")
        buf.write("\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0101")
        buf.write("\7\5\2\2\u0101\u0103\7@\2\2\u0102\u00fb\3\2\2\2\u0102")
        buf.write("\u00fc\3\2\2\2\u0103\u0105\3\2\2\2\u0104\u00f5\3\2\2\2")
        buf.write("\u0104\u00f9\3\2\2\2\u0105\u010b\3\2\2\2\u0106\u0107\f")
        buf.write("\4\2\2\u0107\u0108\7\5\2\2\u0108\u010a\7@\2\2\u0109\u0106")
        buf.write("\3\2\2\2\u010a\u010d\3\2\2\2\u010b\u0109\3\2\2\2\u010b")
        buf.write("\u010c\3\2\2\2\u010c\t\3\2\2\2\u010d\u010b\3\2\2\2\u010e")
        buf.write("\u010f\7\t\2\2\u010f\u0110\7@\2\2\u0110\u0111\7\n\2\2")
        buf.write("\u0111\13\3\2\2\2\u0112\u0113\5\16\b\2\u0113\u0114\7\13")
        buf.write("\2\2\u0114\u0115\5\f\7\2\u0115\u011b\3\2\2\2\u0116\u0118")
        buf.write("\5\24\13\2\u0117\u0119\5\20\t\2\u0118\u0117\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u011b\3\2\2\2\u011a\u0112\3\2\2\2")
        buf.write("\u011a\u0116\3\2\2\2\u011b\r\3\2\2\2\u011c\u012a\5\24")
        buf.write("\13\2\u011d\u0126\7\f\2\2\u011e\u0123\5l\67\2\u011f\u0120")
        buf.write("\7\6\2\2\u0120\u0122\5l\67\2\u0121\u011f\3\2\2\2\u0122")
        buf.write("\u0125\3\2\2\2\u0123\u0121\3\2\2\2\u0123\u0124\3\2\2\2")
        buf.write("\u0124\u0127\3\2\2\2\u0125\u0123\3\2\2\2\u0126\u011e\3")
        buf.write("\2\2\2\u0126\u0127\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u012a")
        buf.write("\7\r\2\2\u0129\u011c\3\2\2\2\u0129\u011d\3\2\2\2\u012a")
        buf.write("\17\3\2\2\2\u012b\u012c\7\16\2\2\u012c\u012e\7\17\2\2")
        buf.write("\u012d\u012f\5\22\n\2\u012e\u012d\3\2\2\2\u012f\u0130")
        buf.write("\3\2\2\2\u0130\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131")
        buf.write("\u0132\3\2\2\2\u0132\u0133\7\20\2\2\u0133\21\3\2\2\2\u0134")
        buf.write("\u0135\7\21\2\2\u0135\u0139\5\u009eP\2\u0136\u0137\7\22")
        buf.write("\2\2\u0137\u0139\5\u0096L\2\u0138\u0134\3\2\2\2\u0138")
        buf.write("\u0136\3\2\2\2\u0139\23\3\2\2\2\u013a\u013f\5\26\f\2\u013b")
        buf.write("\u013c\7@\2\2\u013c\u013e\5\26\f\2\u013d\u013b\3\2\2\2")
        buf.write("\u013e\u0141\3\2\2\2\u013f\u013d\3\2\2\2\u013f\u0140\3")
        buf.write("\2\2\2\u0140\25\3\2\2\2\u0141\u013f\3\2\2\2\u0142\u0147")
        buf.write("\5\30\r\2\u0143\u0144\7\23\2\2\u0144\u0146\5\30\r\2\u0145")
        buf.write("\u0143\3\2\2\2\u0146\u0149\3\2\2\2\u0147\u0145\3\2\2\2")
        buf.write("\u0147\u0148\3\2\2\2\u0148\u014b\3\2\2\2\u0149\u0147\3")
        buf.write("\2\2\2\u014a\u014c\5 \21\2\u014b\u014a\3\2\2\2\u014b\u014c")
        buf.write("\3\2\2\2\u014c\u014f\3\2\2\2\u014d\u014f\5 \21\2\u014e")
        buf.write("\u0142\3\2\2\2\u014e\u014d\3\2\2\2\u014f\27\3\2\2\2\u0150")
        buf.write("\u0154\5\32\16\2\u0151\u0153\5\u0082B\2\u0152\u0151\3")
        buf.write("\2\2\2\u0153\u0156\3\2\2\2\u0154\u0152\3\2\2\2\u0154\u0155")
        buf.write("\3\2\2\2\u0155\31\3\2\2\2\u0156\u0154\3\2\2\2\u0157\u0158")
        buf.write("\b\16\1\2\u0158\u015b\5\b\5\2\u0159\u015a\7\5\2\2\u015a")
        buf.write("\u015c\7\21\2\2\u015b\u0159\3\2\2\2\u015b\u015c\3\2\2")
        buf.write("\2\u015c\u0162\3\2\2\2\u015d\u015e\7\f\2\2\u015e\u015f")
        buf.write("\5\36\20\2\u015f\u0160\7\r\2\2\u0160\u0162\3\2\2\2\u0161")
        buf.write("\u0157\3\2\2\2\u0161\u015d\3\2\2\2\u0162\u016a\3\2\2\2")
        buf.write("\u0163\u0164\f\6\2\2\u0164\u0169\5\34\17\2\u0165\u0166")
        buf.write("\f\5\2\2\u0166\u0167\7\24\2\2\u0167\u0169\7@\2\2\u0168")
        buf.write("\u0163\3\2\2\2\u0168\u0165\3\2\2\2\u0169\u016c\3\2\2\2")
        buf.write("\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016b\33\3\2")
        buf.write("\2\2\u016c\u016a\3\2\2\2\u016d\u016e\7\t\2\2\u016e\u016f")
        buf.write("\5\36\20\2\u016f\u0170\7\n\2\2\u0170\35\3\2\2\2\u0171")
        buf.write("\u0176\5\f\7\2\u0172\u0173\7\6\2\2\u0173\u0175\5\f\7\2")
        buf.write("\u0174\u0172\3\2\2\2\u0175\u0178\3\2\2\2\u0176\u0174\3")
        buf.write("\2\2\2\u0176\u0177\3\2\2\2\u0177\37\3\2\2\2\u0178\u0176")
        buf.write("\3\2\2\2\u0179\u017b\7L\2\2\u017a\u0179\3\2\2\2\u017a")
        buf.write("\u017b\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017e\7\17\2")
        buf.write("\2\u017d\u017f\5\"\22\2\u017e\u017d\3\2\2\2\u017f\u0180")
        buf.write("\3\2\2\2\u0180\u017e\3\2\2\2\u0180\u0181\3\2\2\2\u0181")
        buf.write("\u0182\3\2\2\2\u0182\u0183\7\20\2\2\u0183!\3\2\2\2\u0184")
        buf.write("\u0188\5\u0094K\2\u0185\u0186\7\21\2\2\u0186\u0188\5\u00aa")
        buf.write("V\2\u0187\u0184\3\2\2\2\u0187\u0185\3\2\2\2\u0188#\3\2")
        buf.write("\2\2\u0189\u018a\5\f\7\2\u018a%\3\2\2\2\u018b\u018c\7")
        buf.write("\25\2\2\u018c\u0197\5\24\13\2\u018d\u018f\7\25\2\2\u018e")
        buf.write("\u0190\5\u0082B\2\u018f\u018e\3\2\2\2\u0190\u0191\3\2")
        buf.write("\2\2\u0191\u018f\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0197")
        buf.write("\3\2\2\2\u0193\u0194\7\25\2\2\u0194\u0195\7\26\2\2\u0195")
        buf.write("\u0197\7\27\2\2\u0196\u018b\3\2\2\2\u0196\u018d\3\2\2")
        buf.write("\2\u0196\u0193\3\2\2\2\u0197\'\3\2\2\2\u0198\u019f\5v")
        buf.write("<\2\u0199\u019b\7\30\2\2\u019a\u0199\3\2\2\2\u019a\u019b")
        buf.write("\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019f\7@\2\2\u019d")
        buf.write("\u019f\7\26\2\2\u019e\u0198\3\2\2\2\u019e\u019a\3\2\2")
        buf.write("\2\u019e\u019d\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a1")
        buf.write("\7\13\2\2\u01a1\u01a4\5(\25\2\u01a2\u01a4\5*\26\2\u01a3")
        buf.write("\u019e\3\2\2\2\u01a3\u01a2\3\2\2\2\u01a4)\3\2\2\2\u01a5")
        buf.write("\u01a6\7\31\2\2\u01a6\u01a7\7\f\2\2\u01a7\u01a8\5(\25")
        buf.write("\2\u01a8\u01ac\7\r\2\2\u01a9\u01ab\7L\2\2\u01aa\u01a9")
        buf.write("\3\2\2\2\u01ab\u01ae\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac")
        buf.write("\u01ad\3\2\2\2\u01ad\u01af\3\2\2\2\u01ae\u01ac\3\2\2\2")
        buf.write("\u01af\u01b2\5(\25\2\u01b0\u01b1\7\32\2\2\u01b1\u01b3")
        buf.write("\5(\25\2\u01b2\u01b0\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3")
        buf.write("\u0205\3\2\2\2\u01b4\u01b5\7\33\2\2\u01b5\u01b6\7\f\2")
        buf.write("\2\u01b6\u01b7\5(\25\2\u01b7\u01bb\7\r\2\2\u01b8\u01ba")
        buf.write("\7L\2\2\u01b9\u01b8\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb")
        buf.write("\u01b9\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01be\3\2\2\2")
        buf.write("\u01bd\u01bb\3\2\2\2\u01be\u01bf\5(\25\2\u01bf\u0205\3")
        buf.write("\2\2\2\u01c0\u01c1\7\34\2\2\u01c1\u01c4\5(\25\2\u01c2")
        buf.write("\u01c3\7\35\2\2\u01c3\u01c5\5(\25\2\u01c4\u01c2\3\2\2")
        buf.write("\2\u01c4\u01c5\3\2\2\2\u01c5\u01c8\3\2\2\2\u01c6\u01c7")
        buf.write("\7\36\2\2\u01c7\u01c9\5(\25\2\u01c8\u01c6\3\2\2\2\u01c8")
        buf.write("\u01c9\3\2\2\2\u01c9\u0205\3\2\2\2\u01ca\u01cb\7\37\2")
        buf.write("\2\u01cb\u01cc\5(\25\2\u01cc\u01cd\7\33\2\2\u01cd\u01ce")
        buf.write("\7\f\2\2\u01ce\u01cf\5(\25\2\u01cf\u01d0\7\r\2\2\u01d0")
        buf.write("\u0205\3\2\2\2\u01d1\u01da\7 \2\2\u01d2\u01d3\7\f\2\2")
        buf.write("\u01d3\u01d4\5F$\2\u01d4\u01d5\7\r\2\2\u01d5\u01db\3\2")
        buf.write("\2\2\u01d6\u01d7\7\17\2\2\u01d7\u01d8\5F$\2\u01d8\u01d9")
        buf.write("\7\20\2\2\u01d9\u01db\3\2\2\2\u01da\u01d2\3\2\2\2\u01da")
        buf.write("\u01d6\3\2\2\2\u01db\u01dd\3\2\2\2\u01dc\u01de\7!\2\2")
        buf.write("\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01df\3")
        buf.write("\2\2\2\u01df\u01e0\5(\25\2\u01e0\u0205\3\2\2\2\u01e1\u01e2")
        buf.write("\7\"\2\2\u01e2\u0205\5(\25\2\u01e3\u01e5\7#\2\2\u01e4")
        buf.write("\u01e6\5(\25\2\u01e5\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2")
        buf.write("\u01e6\u0205\3\2\2\2\u01e7\u01ed\5\64\33\2\u01e8\u01ea")
        buf.write("\5\66\34\2\u01e9\u01eb\7\26\2\2\u01ea\u01e9\3\2\2\2\u01ea")
        buf.write("\u01eb\3\2\2\2\u01eb\u01ed\3\2\2\2\u01ec\u01e7\3\2\2\2")
        buf.write("\u01ec\u01e8\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01ef\7")
        buf.write("\5\2\2\u01ef\u01f1\3\2\2\2\u01f0\u01ec\3\2\2\2\u01f0\u01f1")
        buf.write("\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f3\7@\2\2\u01f3")
        buf.write("\u01f4\7$\2\2\u01f4\u0205\5(\25\2\u01f5\u01f6\5\66\34")
        buf.write("\2\u01f6\u01f7\5:\36\2\u01f7\u01f8\7$\2\2\u01f8\u01f9")
        buf.write("\5(\25\2\u01f9\u0205\3\2\2\2\u01fa\u01fc\5.\30\2\u01fb")
        buf.write("\u01fd\5&\24\2\u01fc\u01fb\3\2\2\2\u01fc\u01fd\3\2\2\2")
        buf.write("\u01fd\u0205\3\2\2\2\u01fe\u01ff\5.\30\2\u01ff\u0200\7")
        buf.write("%\2\2\u0200\u0201\7\17\2\2\u0201\u0202\5J&\2\u0202\u0203")
        buf.write("\7\20\2\2\u0203\u0205\3\2\2\2\u0204\u01a5\3\2\2\2\u0204")
        buf.write("\u01b4\3\2\2\2\u0204\u01c0\3\2\2\2\u0204\u01ca\3\2\2\2")
        buf.write("\u0204\u01d1\3\2\2\2\u0204\u01e1\3\2\2\2\u0204\u01e3\3")
        buf.write("\2\2\2\u0204\u01f0\3\2\2\2\u0204\u01f5\3\2\2\2\u0204\u01fa")
        buf.write("\3\2\2\2\u0204\u01fe\3\2\2\2\u0205+\3\2\2\2\u0206\u0207")
        buf.write("\t\2\2\2\u0207-\3\2\2\2\u0208\u020a\5\60\31\2\u0209\u020b")
        buf.write("\7@\2\2\u020a\u0209\3\2\2\2\u020a\u020b\3\2\2\2\u020b")
        buf.write("\u0211\3\2\2\2\u020c\u020d\5,\27\2\u020d\u020e\5\66\34")
        buf.write("\2\u020e\u0210\3\2\2\2\u020f\u020c\3\2\2\2\u0210\u0213")
        buf.write("\3\2\2\2\u0211\u020f\3\2\2\2\u0211\u0212\3\2\2\2\u0212")
        buf.write("\u0215\3\2\2\2\u0213\u0211\3\2\2\2\u0214\u0216\7L\2\2")
        buf.write("\u0215\u0214\3\2\2\2\u0215\u0216\3\2\2\2\u0216/\3\2\2")
        buf.write("\2\u0217\u0218\b\31\1\2\u0218\u0219\5\62\32\2\u0219\u0222")
        buf.write("\3\2\2\2\u021a\u021b\f\3\2\2\u021b\u021d\7@\2\2\u021c")
        buf.write("\u021e\7L\2\2\u021d\u021c\3\2\2\2\u021d\u021e\3\2\2\2")
        buf.write("\u021e\u021f\3\2\2\2\u021f\u0221\5\60\31\4\u0220\u021a")
        buf.write("\3\2\2\2\u0221\u0224\3\2\2\2\u0222\u0220\3\2\2\2\u0222")
        buf.write("\u0223\3\2\2\2\u0223\61\3\2\2\2\u0224\u0222\3\2\2\2\u0225")
        buf.write("\u0227\5,\27\2\u0226\u0225\3\2\2\2\u0226\u0227\3\2\2\2")
        buf.write("\u0227\u022d\3\2\2\2\u0228\u022e\5\64\33\2\u0229\u022b")
        buf.write("\5\66\34\2\u022a\u022c\7\26\2\2\u022b\u022a\3\2\2\2\u022b")
        buf.write("\u022c\3\2\2\2\u022c\u022e\3\2\2\2\u022d\u0228\3\2\2\2")
        buf.write("\u022d\u0229\3\2\2\2\u022e\63\3\2\2\2\u022f\u0232\7)\2")
        buf.write("\2\u0230\u0233\5\u00b8]\2\u0231\u0233\5\u0086D\2\u0232")
        buf.write("\u0230\3\2\2\2\u0232\u0231\3\2\2\2\u0233\u0236\3\2\2\2")
        buf.write("\u0234\u0236\5> \2\u0235\u022f\3\2\2\2\u0235\u0234\3\2")
        buf.write("\2\2\u0236\65\3\2\2\2\u0237\u0238\b\34\1\2\u0238\u0248")
        buf.write("\5\2\2\2\u0239\u0248\5\b\5\2\u023a\u0248\7\26\2\2\u023b")
        buf.write("\u023d\7\f\2\2\u023c\u023e\58\35\2\u023d\u023c\3\2\2\2")
        buf.write("\u023d\u023e\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0248\7")
        buf.write("\r\2\2\u0240\u0241\5\64\33\2\u0241\u0242\7\5\2\2\u0242")
        buf.write("\u0243\7@\2\2\u0243\u0248\3\2\2\2\u0244\u0245\5\64\33")
        buf.write("\2\u0245\u0246\5\34\17\2\u0246\u0248\3\2\2\2\u0247\u0237")
        buf.write("\3\2\2\2\u0247\u0239\3\2\2\2\u0247\u023a\3\2\2\2\u0247")
        buf.write("\u023b\3\2\2\2\u0247\u0240\3\2\2\2\u0247\u0244\3\2\2\2")
        buf.write("\u0248\u0258\3\2\2\2\u0249\u024b\f\6\2\2\u024a\u024c\7")
        buf.write("\26\2\2\u024b\u024a\3\2\2\2\u024b\u024c\3\2\2\2\u024c")
        buf.write("\u024d\3\2\2\2\u024d\u024e\7\5\2\2\u024e\u0257\7@\2\2")
        buf.write("\u024f\u0251\f\4\2\2\u0250\u0252\7\26\2\2\u0251\u0250")
        buf.write("\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0253\3\2\2\2\u0253")
        buf.write("\u0257\5\34\17\2\u0254\u0255\f\3\2\2\u0255\u0257\5:\36")
        buf.write("\2\u0256\u0249\3\2\2\2\u0256\u024f\3\2\2\2\u0256\u0254")
        buf.write("\3\2\2\2\u0257\u025a\3\2\2\2\u0258\u0256\3\2\2\2\u0258")
        buf.write("\u0259\3\2\2\2\u0259\67\3\2\2\2\u025a\u0258\3\2\2\2\u025b")
        buf.write("\u0260\5(\25\2\u025c\u025d\7\6\2\2\u025d\u025f\5(\25\2")
        buf.write("\u025e\u025c\3\2\2\2\u025f\u0262\3\2\2\2\u0260\u025e\3")
        buf.write("\2\2\2\u0260\u0261\3\2\2\2\u02619\3\2\2\2\u0262\u0260")
        buf.write("\3\2\2\2\u0263\u0264\7\f\2\2\u0264\u0265\5<\37\2\u0265")
        buf.write("\u0266\7\r\2\2\u0266\u0270\3\2\2\2\u0267\u0268\7\17\2")
        buf.write("\2\u0268\u0269\5<\37\2\u0269\u026a\7\20\2\2\u026a\u0270")
        buf.write("\3\2\2\2\u026b\u026d\7L\2\2\u026c\u026b\3\2\2\2\u026c")
        buf.write("\u026d\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u0270\5> \2\u026f")
        buf.write("\u0263\3\2\2\2\u026f\u0267\3\2\2\2\u026f\u026c\3\2\2\2")
        buf.write("\u0270;\3\2\2\2\u0271\u0273\58\35\2\u0272\u0271\3\2\2")
        buf.write("\2\u0272\u0273\3\2\2\2\u0273\u027e\3\2\2\2\u0274\u0275")
        buf.write("\58\35\2\u0275\u0276\7\6\2\2\u0276\u0278\3\2\2\2\u0277")
        buf.write("\u0274\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u0279\3\2\2\2")
        buf.write("\u0279\u027b\5.\30\2\u027a\u027c\t\3\2\2\u027b\u027a\3")
        buf.write("\2\2\2\u027b\u027c\3\2\2\2\u027c\u027e\3\2\2\2\u027d\u0272")
        buf.write("\3\2\2\2\u027d\u0277\3\2\2\2\u027e=\3\2\2\2\u027f\u0280")
        buf.write("\7\17\2\2\u0280\u0281\5J&\2\u0281\u0282\7\20\2\2\u0282")
        buf.write("\u0288\3\2\2\2\u0283\u0284\7\17\2\2\u0284\u0285\5@!\2")
        buf.write("\u0285\u0286\7\20\2\2\u0286\u0288\3\2\2\2\u0287\u027f")
        buf.write("\3\2\2\2\u0287\u0283\3\2\2\2\u0288?\3\2\2\2\u0289\u028b")
        buf.write("\5B\"\2\u028a\u0289\3\2\2\2\u028b\u028c\3\2\2\2\u028c")
        buf.write("\u028a\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028f\3\2\2\2")
        buf.write("\u028e\u0290\5D#\2\u028f\u028e\3\2\2\2\u028f\u0290\3\2")
        buf.write("\2\2\u0290A\3\2\2\2\u0291\u02ab\5\u008cG\2\u0292\u0294")
        buf.write("\5\u0082B\2\u0293\u0292\3\2\2\2\u0294\u0297\3\2\2\2\u0295")
        buf.write("\u0293\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0299\3\2\2\2")
        buf.write("\u0297\u0295\3\2\2\2\u0298\u029a\t\4\2\2\u0299\u0298\3")
        buf.write("\2\2\2\u0299\u029a\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u02ab")
        buf.write("\5\u00a2R\2\u029c\u029e\5\u0082B\2\u029d\u029c\3\2\2\2")
        buf.write("\u029e\u02a1\3\2\2\2\u029f\u029d\3\2\2\2\u029f\u02a0\3")
        buf.write("\2\2\2\u02a0\u02a5\3\2\2\2\u02a1\u029f\3\2\2\2\u02a2\u02a4")
        buf.write("\5|?\2\u02a3\u02a2\3\2\2\2\u02a4\u02a7\3\2\2\2\u02a5\u02a3")
        buf.write("\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a8\3\2\2\2\u02a7")
        buf.write("\u02a5\3\2\2\2\u02a8\u02ab\5\u00acW\2\u02a9\u02ab\5*\26")
        buf.write("\2\u02aa\u0291\3\2\2\2\u02aa\u0295\3\2\2\2\u02aa\u029f")
        buf.write("\3\2\2\2\u02aa\u02a9\3\2\2\2\u02abC\3\2\2\2\u02ac\u02bd")
        buf.write("\5*\26\2\u02ad\u02b8\5v<\2\u02ae\u02b0\7\30\2\2\u02af")
        buf.write("\u02ae\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1\3\2\2\2")
        buf.write("\u02b1\u02b4\7@\2\2\u02b2\u02b4\7\26\2\2\u02b3\u02af\3")
        buf.write("\2\2\2\u02b3\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b6")
        buf.write("\7\25\2\2\u02b6\u02b8\5\26\f\2\u02b7\u02ad\3\2\2\2\u02b7")
        buf.write("\u02b3\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02ba\7\13\2")
        buf.write("\2\u02ba\u02bb\5@!\2\u02bb\u02bd\3\2\2\2\u02bc\u02ac\3")
        buf.write("\2\2\2\u02bc\u02b7\3\2\2\2\u02bdE\3\2\2\2\u02be\u02c0")
        buf.write("\5H%\2\u02bf\u02be\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02bf")
        buf.write("\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2G\3\2\2\2\u02c3\u02c4")
        buf.write("\5R*\2\u02c4\u02c5\7+\2\2\u02c5\u02cd\5(\25\2\u02c6\u02cc")
        buf.write("\5N(\2\u02c7\u02c8\5R*\2\u02c8\u02c9\7$\2\2\u02c9\u02ca")
        buf.write("\5(\25\2\u02ca\u02cc\3\2\2\2\u02cb\u02c6\3\2\2\2\u02cb")
        buf.write("\u02c7\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd\u02cb\3\2\2\2")
        buf.write("\u02cd\u02ce\3\2\2\2\u02ceI\3\2\2\2\u02cf\u02cd\3\2\2")
        buf.write("\2\u02d0\u02d2\5L\'\2\u02d1\u02d0\3\2\2\2\u02d2\u02d3")
        buf.write("\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4")
        buf.write("K\3\2\2\2\u02d5\u02d6\7,\2\2\u02d6\u02d8\5P)\2\u02d7\u02d9")
        buf.write("\5N(\2\u02d8\u02d7\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02da")
        buf.write("\3\2\2\2\u02da\u02db\7\13\2\2\u02db\u02dc\5@!\2\u02dc")
        buf.write("M\3\2\2\2\u02dd\u02de\7\31\2\2\u02de\u02df\5.\30\2\u02df")
        buf.write("O\3\2\2\2\u02e0\u02e5\5R*\2\u02e1\u02e2\7-\2\2\u02e2\u02e4")
        buf.write("\5R*\2\u02e3\u02e1\3\2\2\2\u02e4\u02e7\3\2\2\2\u02e5\u02e3")
        buf.write("\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6Q\3\2\2\2\u02e7\u02e5")
        buf.write("\3\2\2\2\u02e8\u02e9\t\5\2\2\u02e9\u02ea\7\25\2\2\u02ea")
        buf.write("\u02ed\5$\23\2\u02eb\u02ed\5T+\2\u02ec\u02e8\3\2\2\2\u02ec")
        buf.write("\u02eb\3\2\2\2\u02edS\3\2\2\2\u02ee\u02f1\7@\2\2\u02ef")
        buf.write("\u02f0\7.\2\2\u02f0\u02f2\5V,\2\u02f1\u02ef\3\2\2\2\u02f1")
        buf.write("\u02f2\3\2\2\2\u02f2\u02f5\3\2\2\2\u02f3\u02f5\5V,\2\u02f4")
        buf.write("\u02ee\3\2\2\2\u02f4\u02f3\3\2\2\2\u02f5U\3\2\2\2\u02f6")
        buf.write("\u0303\5X-\2\u02f7\u02ff\5X-\2\u02f8\u02fa\7@\2\2\u02f9")
        buf.write("\u02fb\7L\2\2\u02fa\u02f9\3\2\2\2\u02fa\u02fb\3\2\2\2")
        buf.write("\u02fb\u02fc\3\2\2\2\u02fc\u02fe\5X-\2\u02fd\u02f8\3\2")
        buf.write("\2\2\u02fe\u0301\3\2\2\2\u02ff\u02fd\3\2\2\2\u02ff\u0300")
        buf.write("\3\2\2\2\u0300\u0303\3\2\2\2\u0301\u02ff\3\2\2\2\u0302")
        buf.write("\u02f6\3\2\2\2\u0302\u02f7\3\2\2\2\u0303W\3\2\2\2\u0304")
        buf.write("\u0324\7\26\2\2\u0305\u0324\7G\2\2\u0306\u0324\5\2\2\2")
        buf.write("\u0307\u030d\5\b\5\2\u0308\u030a\7\f\2\2\u0309\u030b\5")
        buf.write("Z.\2\u030a\u0309\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030c")
        buf.write("\3\2\2\2\u030c\u030e\7\r\2\2\u030d\u0308\3\2\2\2\u030d")
        buf.write("\u030e\3\2\2\2\u030e\u0324\3\2\2\2\u030f\u0310\5\b\5\2")
        buf.write("\u0310\u0314\7\f\2\2\u0311\u0312\5Z.\2\u0312\u0313\7\6")
        buf.write("\2\2\u0313\u0315\3\2\2\2\u0314\u0311\3\2\2\2\u0314\u0315")
        buf.write("\3\2\2\2\u0315\u0318\3\2\2\2\u0316\u0317\7@\2\2\u0317")
        buf.write("\u0319\7.\2\2\u0318\u0316\3\2\2\2\u0318\u0319\3\2\2\2")
        buf.write("\u0319\u031a\3\2\2\2\u031a\u031b\7\26\2\2\u031b\u031c")
        buf.write("\7\27\2\2\u031c\u031d\7\r\2\2\u031d\u0324\3\2\2\2\u031e")
        buf.write("\u0320\7\f\2\2\u031f\u0321\5Z.\2\u0320\u031f\3\2\2\2\u0320")
        buf.write("\u0321\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0324\7\r\2\2")
        buf.write("\u0323\u0304\3\2\2\2\u0323\u0305\3\2\2\2\u0323\u0306\3")
        buf.write("\2\2\2\u0323\u0307\3\2\2\2\u0323\u030f\3\2\2\2\u0323\u031e")
        buf.write("\3\2\2\2\u0324Y\3\2\2\2\u0325\u0328\5P)\2\u0326\u0327")
        buf.write("\7\6\2\2\u0327\u0329\5Z.\2\u0328\u0326\3\2\2\2\u0328\u0329")
        buf.write("\3\2\2\2\u0329\u032d\3\2\2\2\u032a\u032b\7\26\2\2\u032b")
        buf.write("\u032d\7\27\2\2\u032c\u0325\3\2\2\2\u032c\u032a\3\2\2")
        buf.write("\2\u032d[\3\2\2\2\u032e\u032f\7\t\2\2\u032f\u0334\5`\61")
        buf.write("\2\u0330\u0331\7\6\2\2\u0331\u0333\5`\61\2\u0332\u0330")
        buf.write("\3\2\2\2\u0333\u0336\3\2\2\2\u0334\u0332\3\2\2\2\u0334")
        buf.write("\u0335\3\2\2\2\u0335\u0337\3\2\2\2\u0336\u0334\3\2\2\2")
        buf.write("\u0337\u0338\7\n\2\2\u0338]\3\2\2\2\u0339\u033a\7\t\2")
        buf.write("\2\u033a\u033f\5b\62\2\u033b\u033c\7\6\2\2\u033c\u033e")
        buf.write("\5b\62\2\u033d\u033b\3\2\2\2\u033e\u0341\3\2\2\2\u033f")
        buf.write("\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0342\3\2\2\2")
        buf.write("\u0341\u033f\3\2\2\2\u0342\u0343\7\n\2\2\u0343_\3\2\2")
        buf.write("\2\u0344\u0346\5\u0082B\2\u0345\u0344\3\2\2\2\u0346\u0349")
        buf.write("\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348")
        buf.write("\u034b\3\2\2\2\u0349\u0347\3\2\2\2\u034a\u034c\t\6\2\2")
        buf.write("\u034b\u034a\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034d\3")
        buf.write("\2\2\2\u034d\u034e\5b\62\2\u034ea\3\2\2\2\u034f\u0351")
        buf.write("\t\7\2\2\u0350\u0352\5\\/\2\u0351\u0350\3\2\2\2\u0351")
        buf.write("\u0352\3\2\2\2\u0352\u0355\3\2\2\2\u0353\u0354\7/\2\2")
        buf.write("\u0354\u0356\5\f\7\2\u0355\u0353\3\2\2\2\u0355\u0356\3")
        buf.write("\2\2\2\u0356\u0359\3\2\2\2\u0357\u0358\7\60\2\2\u0358")
        buf.write("\u035a\5\f\7\2\u0359\u0357\3\2\2\2\u0359\u035a\3\2\2\2")
        buf.write("\u035a\u035f\3\2\2\2\u035b\u035c\7\61\2\2\u035c\u035e")
        buf.write("\5\f\7\2\u035d\u035b\3\2\2\2\u035e\u0361\3\2\2\2\u035f")
        buf.write("\u035d\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u0366\3\2\2\2")
        buf.write("\u0361\u035f\3\2\2\2\u0362\u0363\7\25\2\2\u0363\u0365")
        buf.write("\5\f\7\2\u0364\u0362\3\2\2\2\u0365\u0368\3\2\2\2\u0366")
        buf.write("\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367c\3\2\2\2\u0368")
        buf.write("\u0366\3\2\2\2\u0369\u036b\5f\64\2\u036a\u0369\3\2\2\2")
        buf.write("\u036b\u036e\3\2\2\2\u036c\u036a\3\2\2\2\u036c\u036d\3")
        buf.write("\2\2\2\u036d\u0377\3\2\2\2\u036e\u036c\3\2\2\2\u036f\u0371")
        buf.write("\7L\2\2\u0370\u036f\3\2\2\2\u0370\u0371\3\2\2\2\u0371")
        buf.write("\u0372\3\2\2\2\u0372\u0373\7\f\2\2\u0373\u0374\7\30\2")
        buf.write("\2\u0374\u0375\5h\65\2\u0375\u0376\7\r\2\2\u0376\u0378")
        buf.write("\3\2\2\2\u0377\u0370\3\2\2\2\u0377\u0378\3\2\2\2\u0378")
        buf.write("e\3\2\2\2\u0379\u037b\7L\2\2\u037a\u0379\3\2\2\2\u037a")
        buf.write("\u037b\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037e\7\f\2\2")
        buf.write("\u037d\u037f\5h\65\2\u037e\u037d\3\2\2\2\u037e\u037f\3")
        buf.write("\2\2\2\u037f\u0380\3\2\2\2\u0380\u0381\7\r\2\2\u0381g")
        buf.write("\3\2\2\2\u0382\u0387\5j\66\2\u0383\u0384\7\6\2\2\u0384")
        buf.write("\u0386\5j\66\2\u0385\u0383\3\2\2\2\u0386\u0389\3\2\2\2")
        buf.write("\u0387\u0385\3\2\2\2\u0387\u0388\3\2\2\2\u0388i\3\2\2")
        buf.write("\2\u0389\u0387\3\2\2\2\u038a\u038c\5\u0082B\2\u038b\u038a")
        buf.write("\3\2\2\2\u038c\u038f\3\2\2\2\u038d\u038b\3\2\2\2\u038d")
        buf.write("\u038e\3\2\2\2\u038e\u0390\3\2\2\2\u038f\u038d\3\2\2\2")
        buf.write("\u0390\u0393\7@\2\2\u0391\u0392\7\25\2\2\u0392\u0394\5")
        buf.write("l\67\2\u0393\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0397")
        buf.write("\3\2\2\2\u0395\u0396\7$\2\2\u0396\u0398\5(\25\2\u0397")
        buf.write("\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398k\3\2\2\2\u0399")
        buf.write("\u03a0\5\f\7\2\u039a\u039b\7\13\2\2\u039b\u03a0\5\f\7")
        buf.write("\2\u039c\u039d\5\f\7\2\u039d\u039e\7\27\2\2\u039e\u03a0")
        buf.write("\3\2\2\2\u039f\u0399\3\2\2\2\u039f\u039a\3\2\2\2\u039f")
        buf.write("\u039c\3\2\2\2\u03a0m\3\2\2\2\u03a1\u03a3\5p9\2\u03a2")
        buf.write("\u03a1\3\2\2\2\u03a3\u03a6\3\2\2\2\u03a4\u03a2\3\2\2\2")
        buf.write("\u03a4\u03a5\3\2\2\2\u03a5\u03af\3\2\2\2\u03a6\u03a4\3")
        buf.write("\2\2\2\u03a7\u03a9\7L\2\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9")
        buf.write("\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ab\7\f\2\2\u03ab")
        buf.write("\u03ac\7\30\2\2\u03ac\u03ad\5r:\2\u03ad\u03ae\7\r\2\2")
        buf.write("\u03ae\u03b0\3\2\2\2\u03af\u03a8\3\2\2\2\u03af\u03b0\3")
        buf.write("\2\2\2\u03b0o\3\2\2\2\u03b1\u03b3\7L\2\2\u03b2\u03b1\3")
        buf.write("\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b6")
        buf.write("\7\f\2\2\u03b5\u03b7\5r:\2\u03b6\u03b5\3\2\2\2\u03b6\u03b7")
        buf.write("\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03b9\7\r\2\2\u03b9")
        buf.write("q\3\2\2\2\u03ba\u03bf\5t;\2\u03bb\u03bc\7\6\2\2\u03bc")
        buf.write("\u03be\5t;\2\u03bd\u03bb\3\2\2\2\u03be\u03c1\3\2\2\2\u03bf")
        buf.write("\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0s\3\2\2\2\u03c1")
        buf.write("\u03bf\3\2\2\2\u03c2\u03c4\5\u0082B\2\u03c3\u03c2\3\2")
        buf.write("\2\2\u03c4\u03c7\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6")
        buf.write("\3\2\2\2\u03c6\u03cb\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c8")
        buf.write("\u03ca\5z>\2\u03c9\u03c8\3\2\2\2\u03ca\u03cd\3\2\2\2\u03cb")
        buf.write("\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cf\3\2\2\2")
        buf.write("\u03cd\u03cb\3\2\2\2\u03ce\u03d0\t\b\2\2\u03cf\u03ce\3")
        buf.write("\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2")
        buf.write("\7@\2\2\u03d2\u03d3\7\25\2\2\u03d3\u03d6\5l\67\2\u03d4")
        buf.write("\u03d5\7$\2\2\u03d5\u03d7\5(\25\2\u03d6\u03d4\3\2\2\2")
        buf.write("\u03d6\u03d7\3\2\2\2\u03d7u\3\2\2\2\u03d8\u03d9\7\f\2")
        buf.write("\2\u03d9\u03de\5x=\2\u03da\u03db\7\6\2\2\u03db\u03dd\5")
        buf.write("x=\2\u03dc\u03da\3\2\2\2\u03dd\u03e0\3\2\2\2\u03de\u03dc")
        buf.write("\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e1\3\2\2\2\u03e0")
        buf.write("\u03de\3\2\2\2\u03e1\u03e2\7\r\2\2\u03e2w\3\2\2\2\u03e3")
        buf.write("\u03e6\t\7\2\2\u03e4\u03e5\7\25\2\2\u03e5\u03e7\5\f\7")
        buf.write("\2\u03e6\u03e4\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7y\3\2")
        buf.write("\2\2\u03e8\u03ec\5|?\2\u03e9\u03ec\5~@\2\u03ea\u03ec\7")
        buf.write("\63\2\2\u03eb\u03e8\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb")
        buf.write("\u03ea\3\2\2\2\u03ec{\3\2\2\2\u03ed\u03ee\t\t\2\2\u03ee")
        buf.write("}\3\2\2\2\u03ef\u03f1\t\n\2\2\u03f0\u03f2\5\u0080A\2\u03f1")
        buf.write("\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\177\3\2\2\2\u03f3")
        buf.write("\u03f4\7\t\2\2\u03f4\u03f5\t\13\2\2\u03f5\u03f6\7\n\2")
        buf.write("\2\u03f6\u0081\3\2\2\2\u03f7\u03f8\7.\2\2\u03f8\u03fc")
        buf.write("\5\32\16\2\u03f9\u03fb\5:\36\2\u03fa\u03f9\3\2\2\2\u03fb")
        buf.write("\u03fe\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fc\u03fd\3\2\2\2")
        buf.write("\u03fd\u0083\3\2\2\2\u03fe\u03fc\3\2\2\2\u03ff\u0400\7")
        buf.write(".\2\2\u0400\u0401\5\32\16\2\u0401\u0402\5:\36\2\u0402")
        buf.write("\u0085\3\2\2\2\u0403\u0405\7L\2\2\u0404\u0403\3\2\2\2")
        buf.write("\u0404\u0405\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408\7")
        buf.write("\17\2\2\u0407\u0409\5\u008aF\2\u0408\u0407\3\2\2\2\u0408")
        buf.write("\u0409\3\2\2\2\u0409\u040b\3\2\2\2\u040a\u040c\5\u0088")
        buf.write("E\2\u040b\u040a\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u040b")
        buf.write("\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u040f\3\2\2\2\u040f")
        buf.write("\u0410\7\20\2\2\u0410\u0087\3\2\2\2\u0411\u0434\5\u008c")
        buf.write("G\2\u0412\u0414\5\u0082B\2\u0413\u0415\7L\2\2\u0414\u0413")
        buf.write("\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0417\3\2\2\2\u0416")
        buf.write("\u0412\3\2\2\2\u0417\u041a\3\2\2\2\u0418\u0416\3\2\2\2")
        buf.write("\u0418\u0419\3\2\2\2\u0419\u041e\3\2\2\2\u041a\u0418\3")
        buf.write("\2\2\2\u041b\u041d\5z>\2\u041c\u041b\3\2\2\2\u041d\u0420")
        buf.write("\3\2\2\2\u041e\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f")
        buf.write("\u0421\3\2\2\2\u0420\u041e\3\2\2\2\u0421\u0434\5\u00a2")
        buf.write("R\2\u0422\u0424\5\u0082B\2\u0423\u0425\7L\2\2\u0424\u0423")
        buf.write("\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0427\3\2\2\2\u0426")
        buf.write("\u0422\3\2\2\2\u0427\u042a\3\2\2\2\u0428\u0426\3\2\2\2")
        buf.write("\u0428\u0429\3\2\2\2\u0429\u042e\3\2\2\2\u042a\u0428\3")
        buf.write("\2\2\2\u042b\u042d\5z>\2\u042c\u042b\3\2\2\2\u042d\u0430")
        buf.write("\3\2\2\2\u042e\u042c\3\2\2\2\u042e\u042f\3\2\2\2\u042f")
        buf.write("\u0431\3\2\2\2\u0430\u042e\3\2\2\2\u0431\u0434\5\u0094")
        buf.write("K\2\u0432\u0434\5(\25\2\u0433\u0411\3\2\2\2\u0433\u0418")
        buf.write("\3\2\2\2\u0433\u0428\3\2\2\2\u0433\u0432\3\2\2\2\u0434")
        buf.write("\u0089\3\2\2\2\u0435\u0438\7@\2\2\u0436\u0437\7\25\2\2")
        buf.write("\u0437\u0439\5\f\7\2\u0438\u0436\3\2\2\2\u0438\u0439\3")
        buf.write("\2\2\2\u0439\u043a\3\2\2\2\u043a\u0441\7\13\2\2\u043b")
        buf.write("\u043c\7\7\2\2\u043c\u043d\7\25\2\2\u043d\u043e\5\f\7")
        buf.write("\2\u043e\u043f\7\13\2\2\u043f\u0441\3\2\2\2\u0440\u0435")
        buf.write("\3\2\2\2\u0440\u043b\3\2\2\2\u0441\u008b\3\2\2\2\u0442")
        buf.write("\u0443\79\2\2\u0443\u0448\5\u008eH\2\u0444\u0445\7\6\2")
        buf.write("\2\u0445\u0447\5\u008eH\2\u0446\u0444\3\2\2\2\u0447\u044a")
        buf.write("\3\2\2\2\u0448\u0446\3\2\2\2\u0448\u0449\3\2\2\2\u0449")
        buf.write("\u008d\3\2\2\2\u044a\u0448\3\2\2\2\u044b\u0452\5\b\5\2")
        buf.write("\u044c\u0450\7\5\2\2\u044d\u0451\7@\2\2\u044e\u0451\7")
        buf.write("\26\2\2\u044f\u0451\5\u0090I\2\u0450\u044d\3\2\2\2\u0450")
        buf.write("\u044e\3\2\2\2\u0450\u044f\3\2\2\2\u0451\u0453\3\2\2\2")
        buf.write("\u0452\u044c\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u008f\3")
        buf.write("\2\2\2\u0454\u045a\7\17\2\2\u0455\u0456\5\u0092J\2\u0456")
        buf.write("\u0457\7\6\2\2\u0457\u0459\3\2\2\2\u0458\u0455\3\2\2\2")
        buf.write("\u0459\u045c\3\2\2\2\u045a\u0458\3\2\2\2\u045a\u045b\3")
        buf.write("\2\2\2\u045b\u045f\3\2\2\2\u045c\u045a\3\2\2\2\u045d\u0460")
        buf.write("\5\u0092J\2\u045e\u0460\7\26\2\2\u045f\u045d\3\2\2\2\u045f")
        buf.write("\u045e\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0462\7\20\2")
        buf.write("\2\u0462\u0091\3\2\2\2\u0463\u0466\7@\2\2\u0464\u0465")
        buf.write("\7\13\2\2\u0465\u0467\t\7\2\2\u0466\u0464\3\2\2\2\u0466")
        buf.write("\u0467\3\2\2\2\u0467\u0093\3\2\2\2\u0468\u0469\7\22\2")
        buf.write("\2\u0469\u0477\5\u0096L\2\u046a\u046b\7\62\2\2\u046b\u0477")
        buf.write("\5\u0098M\2\u046c\u046d\7:\2\2\u046d\u0477\5\u009aN\2")
        buf.write("\u046e\u0472\7\21\2\2\u046f\u0471\7L\2\2\u0470\u046f\3")
        buf.write("\2\2\2\u0471\u0474\3\2\2\2\u0472\u0470\3\2\2\2\u0472\u0473")
        buf.write("\3\2\2\2\u0473\u0475\3\2\2\2\u0474\u0472\3\2\2\2\u0475")
        buf.write("\u0477\5\u009eP\2\u0476\u0468\3\2\2\2\u0476\u046a\3\2")
        buf.write("\2\2\u0476\u046c\3\2\2\2\u0476\u046e\3\2\2\2\u0477\u0095")
        buf.write("\3\2\2\2\u0478\u0479\5\6\4\2\u0479\u047a\7\25\2\2\u047a")
        buf.write("\u047b\5\f\7\2\u047b\u0097\3\2\2\2\u047c\u047d\5\6\4\2")
        buf.write("\u047d\u047e\7\25\2\2\u047e\u047f\5\f\7\2\u047f\u0099")
        buf.write("\3\2\2\2\u0480\u0483\5\u009cO\2\u0481\u0482\7\25\2\2\u0482")
        buf.write("\u0484\5\f\7\2\u0483\u0481\3\2\2\2\u0483\u0484\3\2\2\2")
        buf.write("\u0484\u009b\3\2\2\2\u0485\u0487\7@\2\2\u0486\u0488\5")
        buf.write("^\60\2\u0487\u0486\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u0489")
        buf.write("\3\2\2\2\u0489\u048a\5d\63\2\u048a\u009d\3\2\2\2\u048b")
        buf.write("\u048d\7@\2\2\u048c\u048e\5\\/\2\u048d\u048c\3\2\2\2\u048d")
        buf.write("\u048e\3\2\2\2\u048e\u0491\3\2\2\2\u048f\u0490\7/\2\2")
        buf.write("\u0490\u0492\5\f\7\2\u0491\u048f\3\2\2\2\u0491\u0492\3")
        buf.write("\2\2\2\u0492\u0495\3\2\2\2\u0493\u0494\7\60\2\2\u0494")
        buf.write("\u0496\5\f\7\2\u0495\u0493\3\2\2\2\u0495\u0496\3\2\2\2")
        buf.write("\u0496\u009f\3\2\2\2\u0497\u0498\7\22\2\2\u0498\u049c")
        buf.write("\5\u00a4S\2\u0499\u049a\7\62\2\2\u049a\u049c\5\u00a6T")
        buf.write("\2\u049b\u0497\3\2\2\2\u049b\u0499\3\2\2\2\u049c\u00a1")
        buf.write("\3\2\2\2\u049d\u04aa\5\u00a0Q\2\u049e\u049f\7:\2\2\u049f")
        buf.write("\u04aa\5\u00a8U\2\u04a0\u04a4\7\21\2\2\u04a1\u04a3\7L")
        buf.write("\2\2\u04a2\u04a1\3\2\2\2\u04a3\u04a6\3\2\2\2\u04a4\u04a2")
        buf.write("\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a7\3\2\2\2\u04a6")
        buf.write("\u04a4\3\2\2\2\u04a7\u04aa\5\u00aaV\2\u04a8\u04aa\5\u00ac")
        buf.write("W\2\u04a9\u049d\3\2\2\2\u04a9\u049e\3\2\2\2\u04a9\u04a0")
        buf.write("\3\2\2\2\u04a9\u04a8\3\2\2\2\u04aa\u00a3\3\2\2\2\u04ab")
        buf.write("\u04b0\5T+\2\u04ac\u04ad\7\6\2\2\u04ad\u04af\5T+\2\u04ae")
        buf.write("\u04ac\3\2\2\2\u04af\u04b2\3\2\2\2\u04b0\u04ae\3\2\2\2")
        buf.write("\u04b0\u04b1\3\2\2\2\u04b1\u04b5\3\2\2\2\u04b2\u04b0\3")
        buf.write("\2\2\2\u04b3\u04b4\7\25\2\2\u04b4\u04b6\5\f\7\2\u04b5")
        buf.write("\u04b3\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04b7\3\2\2\2")
        buf.write("\u04b7\u04b8\7$\2\2\u04b8\u04b9\5(\25\2\u04b9\u00a5\3")
        buf.write("\2\2\2\u04ba\u04c2\5\u00a4S\2\u04bb\u04bc\5\6\4\2\u04bc")
        buf.write("\u04bd\7\25\2\2\u04bd\u04be\5\f\7\2\u04be\u04bf\7$\2\2")
        buf.write("\u04bf\u04c0\7\26\2\2\u04c0\u04c2\3\2\2\2\u04c1\u04ba")
        buf.write("\3\2\2\2\u04c1\u04bb\3\2\2\2\u04c2\u00a7\3\2\2\2\u04c3")
        buf.write("\u04c6\5\u009cO\2\u04c4\u04c5\7\25\2\2\u04c5\u04c7\5\f")
        buf.write("\7\2\u04c6\u04c4\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c8")
        buf.write("\3\2\2\2\u04c8\u04c9\7$\2\2\u04c9\u04ca\5(\25\2\u04ca")
        buf.write("\u04df\3\2\2\2\u04cb\u04cd\5\u009cO\2\u04cc\u04ce\7L\2")
        buf.write("\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04cf")
        buf.write("\3\2\2\2\u04cf\u04d0\7\17\2\2\u04d0\u04d1\5@!\2\u04d1")
        buf.write("\u04d2\7\20\2\2\u04d2\u04df\3\2\2\2\u04d3\u04d4\7\7\2")
        buf.write("\2\u04d4\u04d5\5f\64\2\u04d5\u04dc\5d\63\2\u04d6\u04d7")
        buf.write("\7$\2\2\u04d7\u04dd\5\u00c6d\2\u04d8\u04da\7L\2\2\u04d9")
        buf.write("\u04d8\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db\3\2\2\2")
        buf.write("\u04db\u04dd\5\u00c8e\2\u04dc\u04d6\3\2\2\2\u04dc\u04d9")
        buf.write("\3\2\2\2\u04dd\u04df\3\2\2\2\u04de\u04c3\3\2\2\2\u04de")
        buf.write("\u04cb\3\2\2\2\u04de\u04d3\3\2\2\2\u04df\u00a9\3\2\2\2")
        buf.write("\u04e0\u04e2\7@\2\2\u04e1\u04e3\5\\/\2\u04e2\u04e1\3\2")
        buf.write("\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4\u04e5")
        buf.write("\7$\2\2\u04e5\u04e6\5\f\7\2\u04e6\u00ab\3\2\2\2\u04e7")
        buf.write("\u04e9\7,\2\2\u04e8\u04e7\3\2\2\2\u04e8\u04e9\3\2\2\2")
        buf.write("\u04e9\u04ea\3\2\2\2\u04ea\u04eb\7;\2\2\u04eb\u04f4\5")
        buf.write("\u00aeX\2\u04ec\u04ee\7,\2\2\u04ed\u04ec\3\2\2\2\u04ed")
        buf.write("\u04ee\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f0\7<\2\2")
        buf.write("\u04f0\u04f4\5\u00b2Z\2\u04f1\u04f2\7=\2\2\u04f2\u04f4")
        buf.write("\5\u00b0Y\2\u04f3\u04e8\3\2\2\2\u04f3\u04ed\3\2\2\2\u04f3")
        buf.write("\u04f1\3\2\2\2\u04f4\u00ad\3\2\2\2\u04f5\u04f7\7@\2\2")
        buf.write("\u04f6\u04f8\5\\/\2\u04f7\u04f6\3\2\2\2\u04f7\u04f8\3")
        buf.write("\2\2\2\u04f8\u04fc\3\2\2\2\u04f9\u04fb\5\u0084C\2\u04fa")
        buf.write("\u04f9\3\2\2\2\u04fb\u04fe\3\2\2\2\u04fc\u04fa\3\2\2\2")
        buf.write("\u04fc\u04fd\3\2\2\2\u04fd\u0500\3\2\2\2\u04fe\u04fc\3")
        buf.write("\2\2\2\u04ff\u0501\5~@\2\u0500\u04ff\3\2\2\2\u0500\u0501")
        buf.write("\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u0503\5n8\2\u0503\u0504")
        buf.write("\5\u00b4[\2\u0504\u00af\3\2\2\2\u0505\u0507\7@\2\2\u0506")
        buf.write("\u0508\5\\/\2\u0507\u0506\3\2\2\2\u0507\u0508\3\2\2\2")
        buf.write("\u0508\u0509\3\2\2\2\u0509\u050a\5\u00b6\\\2\u050a\u00b1")
        buf.write("\3\2\2\2\u050b\u050c\7@\2\2\u050c\u050d\5\u00b4[\2\u050d")
        buf.write("\u00b3\3\2\2\2\u050e\u050f\7>\2\2\u050f\u0517\5\u00b8")
        buf.write("]\2\u0510\u0512\7>\2\2\u0511\u0510\3\2\2\2\u0511\u0512")
        buf.write("\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0515\5\u0086D\2\u0514")
        buf.write("\u0511\3\2\2\2\u0514\u0515\3\2\2\2\u0515\u0517\3\2\2\2")
        buf.write("\u0516\u050e\3\2\2\2\u0516\u0514\3\2\2\2\u0517\u00b5\3")
        buf.write("\2\2\2\u0518\u0519\7>\2\2\u0519\u0521\5\u00ba^\2\u051a")
        buf.write("\u051c\7>\2\2\u051b\u051a\3\2\2\2\u051b\u051c\3\2\2\2")
        buf.write("\u051c\u051d\3\2\2\2\u051d\u051f\5\u0086D\2\u051e\u051b")
        buf.write("\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u0521\3\2\2\2\u0520")
        buf.write("\u0518\3\2\2\2\u0520\u051e\3\2\2\2\u0521\u00b7\3\2\2\2")
        buf.write("\u0522\u0524\5\u00c2b\2\u0523\u0522\3\2\2\2\u0523\u0524")
        buf.write("\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0527\5\u00bc_\2\u0526")
        buf.write("\u0528\5\u0086D\2\u0527\u0526\3\2\2\2\u0527\u0528\3\2")
        buf.write("\2\2\u0528\u00b9\3\2\2\2\u0529\u052b\5\u00c2b\2\u052a")
        buf.write("\u0529\3\2\2\2\u052a\u052b\3\2\2\2\u052b\u052c\3\2\2\2")
        buf.write("\u052c\u052e\5\u00be`\2\u052d\u052f\5\u0086D\2\u052e\u052d")
        buf.write("\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u00bb\3\2\2\2\u0530")
        buf.write("\u0535\5\u00c0a\2\u0531\u0532\7\23\2\2\u0532\u0534\5\30")
        buf.write("\r\2\u0533\u0531\3\2\2\2\u0534\u0537\3\2\2\2\u0535\u0533")
        buf.write("\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u00bd\3\2\2\2\u0537")
        buf.write("\u0535\3\2\2\2\u0538\u053d\5\30\r\2\u0539\u053a\7\23\2")
        buf.write("\2\u053a\u053c\5\30\r\2\u053b\u0539\3\2\2\2\u053c\u053f")
        buf.write("\3\2\2\2\u053d\u053b\3\2\2\2\u053d\u053e\3\2\2\2\u053e")
        buf.write("\u00bf\3\2\2\2\u053f\u053d\3\2\2\2\u0540\u0544\5\30\r")
        buf.write("\2\u0541\u0543\5:\36\2\u0542\u0541\3\2\2\2\u0543\u0546")
        buf.write("\3\2\2\2\u0544\u0542\3\2\2\2\u0544\u0545\3\2\2\2\u0545")
        buf.write("\u00c1\3\2\2\2\u0546\u0544\3\2\2\2\u0547\u0549\7\17\2")
        buf.write("\2\u0548\u054a\5\u00c4c\2\u0549\u0548\3\2\2\2\u054a\u054b")
        buf.write("\3\2\2\2\u054b\u0549\3\2\2\2\u054b\u054c\3\2\2\2\u054c")
        buf.write("\u054d\3\2\2\2\u054d\u054e\7\20\2\2\u054e\u054f\7\23\2")
        buf.write("\2\u054f\u00c3\3\2\2\2\u0550\u0552\5\u0082B\2\u0551\u0553")
        buf.write("\7L\2\2\u0552\u0551\3\2\2\2\u0552\u0553\3\2\2\2\u0553")
        buf.write("\u0555\3\2\2\2\u0554\u0550\3\2\2\2\u0555\u0558\3\2\2\2")
        buf.write("\u0556\u0554\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u055c\3")
        buf.write("\2\2\2\u0558\u0556\3\2\2\2\u0559\u055b\5z>\2\u055a\u0559")
        buf.write("\3\2\2\2\u055b\u055e\3\2\2\2\u055c\u055a\3\2\2\2\u055c")
        buf.write("\u055d\3\2\2\2\u055d\u055f\3\2\2\2\u055e\u055c\3\2\2\2")
        buf.write("\u055f\u0560\5\u00a0Q\2\u0560\u00c5\3\2\2\2\u0561\u0564")
        buf.write("\5\u00caf\2\u0562\u0564\5\u00c8e\2\u0563\u0561\3\2\2\2")
        buf.write("\u0563\u0562\3\2\2\2\u0564\u00c7\3\2\2\2\u0565\u0566\7")
        buf.write("\17\2\2\u0566\u056a\5\u00caf\2\u0567\u0569\5B\"\2\u0568")
        buf.write("\u0567\3\2\2\2\u0569\u056c\3\2\2\2\u056a\u0568\3\2\2\2")
        buf.write("\u056a\u056b\3\2\2\2\u056b\u056d\3\2\2\2\u056c\u056a\3")
        buf.write("\2\2\2\u056d\u056e\7\20\2\2\u056e\u00c9\3\2\2\2\u056f")
        buf.write("\u0571\7\7\2\2\u0570\u0572\5:\36\2\u0571\u0570\3\2\2\2")
        buf.write("\u0572\u0573\3\2\2\2\u0573\u0571\3\2\2\2\u0573\u0574\3")
        buf.write("\2\2\2\u0574\u00cb\3\2\2\2\u0575\u0577\5\u00ceh\2\u0576")
        buf.write("\u0575\3\2\2\2\u0577\u0578\3\2\2\2\u0578\u0576\3\2\2\2")
        buf.write("\u0578\u0579\3\2\2\2\u0579\u00cd\3\2\2\2\u057a\u057c\5")
        buf.write("\u0082B\2\u057b\u057d\7L\2\2\u057c\u057b\3\2\2\2\u057c")
        buf.write("\u057d\3\2\2\2\u057d\u057f\3\2\2\2\u057e\u057a\3\2\2\2")
        buf.write("\u057f\u0582\3\2\2\2\u0580\u057e\3\2\2\2\u0580\u0581\3")
        buf.write("\2\2\2\u0581\u0586\3\2\2\2\u0582\u0580\3\2\2\2\u0583\u0585")
        buf.write("\5z>\2\u0584\u0583\3\2\2\2\u0585\u0588\3\2\2\2\u0586\u0584")
        buf.write("\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0589\3\2\2\2\u0588")
        buf.write("\u0586\3\2\2\2\u0589\u058e\5\u00acW\2\u058a\u058e\5\u008c")
        buf.write("G\2\u058b\u058e\5\u00d0i\2\u058c\u058e\5\u00d2j\2\u058d")
        buf.write("\u0580\3\2\2\2\u058d\u058a\3\2\2\2\u058d\u058b\3\2\2\2")
        buf.write("\u058d\u058c\3\2\2\2\u058e\u00cf\3\2\2\2\u058f\u0590\7")
        buf.write("?\2\2\u0590\u0592\5\4\3\2\u0591\u0593\7L\2\2\u0592\u0591")
        buf.write("\3\2\2\2\u0592\u0593\3\2\2\2\u0593\u0594\3\2\2\2\u0594")
        buf.write("\u0595\7\17\2\2\u0595\u0596\5\u00ccg\2\u0596\u0597\7\20")
        buf.write("\2\2\u0597\u00d1\3\2\2\2\u0598\u0599\7?\2\2\u0599\u059a")
        buf.write("\7<\2\2\u059a\u059b\5\u00b2Z\2\u059b\u00d3\3\2\2\2\u059c")
        buf.write("\u059d\7?\2\2\u059d\u059f\5\4\3\2\u059e\u059c\3\2\2\2")
        buf.write("\u059f\u05a2\3\2\2\2\u05a0\u059e\3\2\2\2\u05a0\u05a1\3")
        buf.write("\2\2\2\u05a1\u05a3\3\2\2\2\u05a2\u05a0\3\2\2\2\u05a3\u05a4")
        buf.write("\5\u00ccg\2\u05a4\u00d5\3\2\2\2\u00d2\u00d7\u00db\u00e3")
        buf.write("\u00ea\u00f2\u00f9\u00fe\u0102\u0104\u010b\u0118\u011a")
        buf.write("\u0123\u0126\u0129\u0130\u0138\u013f\u0147\u014b\u014e")
        buf.write("\u0154\u015b\u0161\u0168\u016a\u0176\u017a\u0180\u0187")
        buf.write("\u0191\u0196\u019a\u019e\u01a3\u01ac\u01b2\u01bb\u01c4")
        buf.write("\u01c8\u01da\u01dd\u01e5\u01ea\u01ec\u01f0\u01fc\u0204")
        buf.write("\u020a\u0211\u0215\u021d\u0222\u0226\u022b\u022d\u0232")
        buf.write("\u0235\u023d\u0247\u024b\u0251\u0256\u0258\u0260\u026c")
        buf.write("\u026f\u0272\u0277\u027b\u027d\u0287\u028c\u028f\u0295")
        buf.write("\u0299\u029f\u02a5\u02aa\u02af\u02b3\u02b7\u02bc\u02c1")
        buf.write("\u02cb\u02cd\u02d3\u02d8\u02e5\u02ec\u02f1\u02f4\u02fa")
        buf.write("\u02ff\u0302\u030a\u030d\u0314\u0318\u0320\u0323\u0328")
        buf.write("\u032c\u0334\u033f\u0347\u034b\u0351\u0355\u0359\u035f")
        buf.write("\u0366\u036c\u0370\u0377\u037a\u037e\u0387\u038d\u0393")
        buf.write("\u0397\u039f\u03a4\u03a8\u03af\u03b2\u03b6\u03bf\u03c5")
        buf.write("\u03cb\u03cf\u03d6\u03de\u03e6\u03eb\u03f1\u03fc\u0404")
        buf.write("\u0408\u040d\u0414\u0418\u041e\u0424\u0428\u042e\u0433")
        buf.write("\u0438\u0440\u0448\u0450\u0452\u045a\u045f\u0466\u0472")
        buf.write("\u0476\u0483\u0487\u048d\u0491\u0495\u049b\u04a4\u04a9")
        buf.write("\u04b0\u04b5\u04c1\u04c6\u04cd\u04d9\u04dc\u04de\u04e2")
        buf.write("\u04e8\u04ed\u04f3\u04f7\u04fc\u0500\u0507\u0511\u0514")
        buf.write("\u0516\u051b\u051e\u0520\u0523\u0527\u052a\u052e\u0535")
        buf.write("\u053d\u0544\u054b\u0552\u0556\u055c\u0563\u056a\u0573")
        buf.write("\u0578\u057c\u0580\u0586\u058d\u0592\u05a0")
        return buf.getvalue()


class ScalaParser ( Parser ):

    grammarFileName = "Scala.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'-'", "'null'", "'.'", "','", "'this'", 
                     "'super'", "'['", "']'", "'=>'", "'('", "')'", "'forSome'", 
                     "'{'", "'}'", "'type'", "'val'", "'with'", "'#'", "':'", 
                     "'_'", "'*'", "'implicit'", "'if'", "'else'", "'while'", 
                     "'try'", "'catch'", "'finally'", "'do'", "'for'", "'yield'", 
                     "'throw'", "'return'", "'='", "'match'", "'+'", "'~'", 
                     "'!'", "'new'", "'lazy'", "'<-'", "'case'", "'|'", 
                     "'@'", "'>:'", "'<:'", "'<%'", "'var'", "'override'", 
                     "'abstract'", "'final'", "'sealed'", "'private'", "'protected'", 
                     "'import'", "'def'", "'class'", "'object'", "'trait'", 
                     "'extends'", "'package'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "Id", "BooleanLiteral", 
                      "CharacterLiteral", "SymbolLiteral", "IntegerLiteral", 
                      "StringLiteral", "FloatingPointLiteral", "Varid", 
                      "BoundVarid", "Paren", "Delim", "Semi", "NL", "NEWLINE", 
                      "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_literal = 0
    RULE_qualId = 1
    RULE_ids = 2
    RULE_stableId = 3
    RULE_classQualifier = 4
    RULE_type_ = 5
    RULE_functionArgTypes = 6
    RULE_existentialClause = 7
    RULE_existentialDcl = 8
    RULE_infixType = 9
    RULE_compoundType = 10
    RULE_annotType = 11
    RULE_simpleType = 12
    RULE_typeArgs = 13
    RULE_types = 14
    RULE_refinement = 15
    RULE_refineStat = 16
    RULE_typePat = 17
    RULE_ascription = 18
    RULE_expr = 19
    RULE_expr1 = 20
    RULE_prefixDef = 21
    RULE_postfixExpr = 22
    RULE_infixExpr = 23
    RULE_prefixExpr = 24
    RULE_simpleExpr = 25
    RULE_simpleExpr1 = 26
    RULE_exprs = 27
    RULE_argumentExprs = 28
    RULE_args = 29
    RULE_blockExpr = 30
    RULE_block = 31
    RULE_blockStat = 32
    RULE_resultExpr = 33
    RULE_enumerators = 34
    RULE_generator = 35
    RULE_caseClauses = 36
    RULE_caseClause = 37
    RULE_guard_ = 38
    RULE_pattern = 39
    RULE_pattern1 = 40
    RULE_pattern2 = 41
    RULE_pattern3 = 42
    RULE_simplePattern = 43
    RULE_patterns = 44
    RULE_typeParamClause = 45
    RULE_funTypeParamClause = 46
    RULE_variantTypeParam = 47
    RULE_typeParam = 48
    RULE_paramClauses = 49
    RULE_paramClause = 50
    RULE_params = 51
    RULE_param = 52
    RULE_paramType = 53
    RULE_classParamClauses = 54
    RULE_classParamClause = 55
    RULE_classParams = 56
    RULE_classParam = 57
    RULE_bindings = 58
    RULE_binding = 59
    RULE_modifier = 60
    RULE_localModifier = 61
    RULE_accessModifier = 62
    RULE_accessQualifier = 63
    RULE_annotation = 64
    RULE_constrAnnotation = 65
    RULE_templateBody = 66
    RULE_templateStat = 67
    RULE_selfType = 68
    RULE_import_ = 69
    RULE_importExpr = 70
    RULE_importSelectors = 71
    RULE_importSelector = 72
    RULE_dcl = 73
    RULE_valDcl = 74
    RULE_varDcl = 75
    RULE_funDcl = 76
    RULE_funSig = 77
    RULE_typeDcl = 78
    RULE_patVarDef = 79
    RULE_def_ = 80
    RULE_patDef = 81
    RULE_varDef = 82
    RULE_funDef = 83
    RULE_typeDef = 84
    RULE_tmplDef = 85
    RULE_classDef = 86
    RULE_traitDef = 87
    RULE_objectDef = 88
    RULE_classTemplateOpt = 89
    RULE_traitTemplateOpt = 90
    RULE_classTemplate = 91
    RULE_traitTemplate = 92
    RULE_classParents = 93
    RULE_traitParents = 94
    RULE_constr = 95
    RULE_earlyDefs = 96
    RULE_earlyDef = 97
    RULE_constrExpr = 98
    RULE_constrBlock = 99
    RULE_selfInvocation = 100
    RULE_topStatSeq = 101
    RULE_topStat = 102
    RULE_packaging = 103
    RULE_packageObject = 104
    RULE_compilationUnit = 105

    ruleNames =  [ "literal", "qualId", "ids", "stableId", "classQualifier", 
                   "type_", "functionArgTypes", "existentialClause", "existentialDcl", 
                   "infixType", "compoundType", "annotType", "simpleType", 
                   "typeArgs", "types", "refinement", "refineStat", "typePat", 
                   "ascription", "expr", "expr1", "prefixDef", "postfixExpr", 
                   "infixExpr", "prefixExpr", "simpleExpr", "simpleExpr1", 
                   "exprs", "argumentExprs", "args", "blockExpr", "block", 
                   "blockStat", "resultExpr", "enumerators", "generator", 
                   "caseClauses", "caseClause", "guard_", "pattern", "pattern1", 
                   "pattern2", "pattern3", "simplePattern", "patterns", 
                   "typeParamClause", "funTypeParamClause", "variantTypeParam", 
                   "typeParam", "paramClauses", "paramClause", "params", 
                   "param", "paramType", "classParamClauses", "classParamClause", 
                   "classParams", "classParam", "bindings", "binding", "modifier", 
                   "localModifier", "accessModifier", "accessQualifier", 
                   "annotation", "constrAnnotation", "templateBody", "templateStat", 
                   "selfType", "import_", "importExpr", "importSelectors", 
                   "importSelector", "dcl", "valDcl", "varDcl", "funDcl", 
                   "funSig", "typeDcl", "patVarDef", "def_", "patDef", "varDef", 
                   "funDef", "typeDef", "tmplDef", "classDef", "traitDef", 
                   "objectDef", "classTemplateOpt", "traitTemplateOpt", 
                   "classTemplate", "traitTemplate", "classParents", "traitParents", 
                   "constr", "earlyDefs", "earlyDef", "constrExpr", "constrBlock", 
                   "selfInvocation", "topStatSeq", "topStat", "packaging", 
                   "packageObject", "compilationUnit" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    Id=62
    BooleanLiteral=63
    CharacterLiteral=64
    SymbolLiteral=65
    IntegerLiteral=66
    StringLiteral=67
    FloatingPointLiteral=68
    Varid=69
    BoundVarid=70
    Paren=71
    Delim=72
    Semi=73
    NL=74
    NEWLINE=75
    WS=76
    COMMENT=77
    LINE_COMMENT=78

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(ScalaParser.IntegerLiteral, 0)

        def FloatingPointLiteral(self):
            return self.getToken(ScalaParser.FloatingPointLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(ScalaParser.BooleanLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(ScalaParser.CharacterLiteral, 0)

        def StringLiteral(self):
            return self.getToken(ScalaParser.StringLiteral, 0)

        def SymbolLiteral(self):
            return self.getToken(ScalaParser.SymbolLiteral, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = ScalaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.state = 225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__0:
                    self.state = 212
                    self.match(ScalaParser.T__0)


                self.state = 215
                self.match(ScalaParser.IntegerLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__0:
                    self.state = 216
                    self.match(ScalaParser.T__0)


                self.state = 219
                self.match(ScalaParser.FloatingPointLiteral)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 220
                self.match(ScalaParser.BooleanLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 221
                self.match(ScalaParser.CharacterLiteral)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 222
                self.match(ScalaParser.StringLiteral)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 223
                self.match(ScalaParser.SymbolLiteral)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 224
                self.match(ScalaParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.Id)
            else:
                return self.getToken(ScalaParser.Id, i)

        def getRuleIndex(self):
            return ScalaParser.RULE_qualId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualId" ):
                listener.enterQualId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualId" ):
                listener.exitQualId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualId" ):
                return visitor.visitQualId(self)
            else:
                return visitor.visitChildren(self)




    def qualId(self):

        localctx = ScalaParser.QualIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_qualId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(ScalaParser.Id)
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__2:
                self.state = 228
                self.match(ScalaParser.T__2)
                self.state = 229
                self.match(ScalaParser.Id)
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.Id)
            else:
                return self.getToken(ScalaParser.Id, i)

        def getRuleIndex(self):
            return ScalaParser.RULE_ids

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIds" ):
                listener.enterIds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIds" ):
                listener.exitIds(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIds" ):
                return visitor.visitIds(self)
            else:
                return visitor.visitChildren(self)




    def ids(self):

        localctx = ScalaParser.IdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ids)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(ScalaParser.Id)
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__3:
                self.state = 236
                self.match(ScalaParser.T__3)
                self.state = 237
                self.match(ScalaParser.Id)
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StableIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.Id)
            else:
                return self.getToken(ScalaParser.Id, i)

        def classQualifier(self):
            return self.getTypedRuleContext(ScalaParser.ClassQualifierContext,0)


        def stableId(self):
            return self.getTypedRuleContext(ScalaParser.StableIdContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_stableId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStableId" ):
                listener.enterStableId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStableId" ):
                listener.exitStableId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStableId" ):
                return visitor.visitStableId(self)
            else:
                return visitor.visitChildren(self)



    def stableId(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ScalaParser.StableIdContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 6
        self.enterRecursionRule(localctx, 6, self.RULE_stableId, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 244
                self.match(ScalaParser.Id)
                pass

            elif la_ == 2:
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.Id:
                    self.state = 245
                    self.match(ScalaParser.Id)
                    self.state = 246
                    self.match(ScalaParser.T__2)


                self.state = 256
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ScalaParser.T__4]:
                    self.state = 249
                    self.match(ScalaParser.T__4)
                    pass
                elif token in [ScalaParser.T__5]:
                    self.state = 250
                    self.match(ScalaParser.T__5)
                    self.state = 252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ScalaParser.T__6:
                        self.state = 251
                        self.classQualifier()


                    self.state = 254
                    self.match(ScalaParser.T__2)
                    self.state = 255
                    self.match(ScalaParser.Id)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ScalaParser.StableIdContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_stableId)
                    self.state = 260
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 261
                    self.match(ScalaParser.T__2)
                    self.state = 262
                    self.match(ScalaParser.Id) 
                self.state = 267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ClassQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_classQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassQualifier" ):
                listener.enterClassQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassQualifier" ):
                listener.exitClassQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassQualifier" ):
                return visitor.visitClassQualifier(self)
            else:
                return visitor.visitChildren(self)




    def classQualifier(self):

        localctx = ScalaParser.ClassQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_classQualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.match(ScalaParser.T__6)
            self.state = 269
            self.match(ScalaParser.Id)
            self.state = 270
            self.match(ScalaParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionArgTypes(self):
            return self.getTypedRuleContext(ScalaParser.FunctionArgTypesContext,0)


        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def infixType(self):
            return self.getTypedRuleContext(ScalaParser.InfixTypeContext,0)


        def existentialClause(self):
            return self.getTypedRuleContext(ScalaParser.ExistentialClauseContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_" ):
                return visitor.visitType_(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = ScalaParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_type_)
        self._la = 0 # Token type
        try:
            self.state = 280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 272
                self.functionArgTypes()
                self.state = 273
                self.match(ScalaParser.T__8)
                self.state = 274
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 276
                self.infixType()
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__11:
                    self.state = 277
                    self.existentialClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixType(self):
            return self.getTypedRuleContext(ScalaParser.InfixTypeContext,0)


        def paramType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ParamTypeContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ParamTypeContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_functionArgTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgTypes" ):
                listener.enterFunctionArgTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgTypes" ):
                listener.exitFunctionArgTypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgTypes" ):
                return visitor.visitFunctionArgTypes(self)
            else:
                return visitor.visitChildren(self)




    def functionArgTypes(self):

        localctx = ScalaParser.FunctionArgTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_functionArgTypes)
        self._la = 0 # Token type
        try:
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 282
                self.infixType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 283
                self.match(ScalaParser.T__9)
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__8) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12) | (1 << ScalaParser.Id))) != 0) or _la==ScalaParser.NL:
                    self.state = 284
                    self.paramType()
                    self.state = 289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ScalaParser.T__3:
                        self.state = 285
                        self.match(ScalaParser.T__3)
                        self.state = 286
                        self.paramType()
                        self.state = 291
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 294
                self.match(ScalaParser.T__10)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistentialClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def existentialDcl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ExistentialDclContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ExistentialDclContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_existentialClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistentialClause" ):
                listener.enterExistentialClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistentialClause" ):
                listener.exitExistentialClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistentialClause" ):
                return visitor.visitExistentialClause(self)
            else:
                return visitor.visitChildren(self)




    def existentialClause(self):

        localctx = ScalaParser.ExistentialClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_existentialClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(ScalaParser.T__11)
            self.state = 298
            self.match(ScalaParser.T__12)
            self.state = 300 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 299
                self.existentialDcl()
                self.state = 302 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ScalaParser.T__14 or _la==ScalaParser.T__15):
                    break

            self.state = 304
            self.match(ScalaParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistentialDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDcl(self):
            return self.getTypedRuleContext(ScalaParser.TypeDclContext,0)


        def valDcl(self):
            return self.getTypedRuleContext(ScalaParser.ValDclContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_existentialDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistentialDcl" ):
                listener.enterExistentialDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistentialDcl" ):
                listener.exitExistentialDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistentialDcl" ):
                return visitor.visitExistentialDcl(self)
            else:
                return visitor.visitChildren(self)




    def existentialDcl(self):

        localctx = ScalaParser.ExistentialDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_existentialDcl)
        try:
            self.state = 310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScalaParser.T__14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 306
                self.match(ScalaParser.T__14)
                self.state = 307
                self.typeDcl()
                pass
            elif token in [ScalaParser.T__15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 308
                self.match(ScalaParser.T__15)
                self.state = 309
                self.valDcl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfixTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.CompoundTypeContext)
            else:
                return self.getTypedRuleContext(ScalaParser.CompoundTypeContext,i)


        def Id(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.Id)
            else:
                return self.getToken(ScalaParser.Id, i)

        def getRuleIndex(self):
            return ScalaParser.RULE_infixType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixType" ):
                listener.enterInfixType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixType" ):
                listener.exitInfixType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfixType" ):
                return visitor.visitInfixType(self)
            else:
                return visitor.visitChildren(self)




    def infixType(self):

        localctx = ScalaParser.InfixTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_infixType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.compoundType()
            self.state = 317
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 313
                    self.match(ScalaParser.Id)
                    self.state = 314
                    self.compoundType() 
                self.state = 319
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotTypeContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotTypeContext,i)


        def refinement(self):
            return self.getTypedRuleContext(ScalaParser.RefinementContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_compoundType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundType" ):
                listener.enterCompoundType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundType" ):
                listener.exitCompoundType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundType" ):
                return visitor.visitCompoundType(self)
            else:
                return visitor.visitChildren(self)




    def compoundType(self):

        localctx = ScalaParser.CompoundTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_compoundType)
        self._la = 0 # Token type
        try:
            self.state = 332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScalaParser.T__4, ScalaParser.T__5, ScalaParser.T__9, ScalaParser.Id]:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.annotType()
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScalaParser.T__16:
                    self.state = 321
                    self.match(ScalaParser.T__16)
                    self.state = 322
                    self.annotType()
                    self.state = 327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 328
                    self.refinement()


                pass
            elif token in [ScalaParser.T__12, ScalaParser.NL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.refinement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleType(self):
            return self.getTypedRuleContext(ScalaParser.SimpleTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_annotType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotType" ):
                listener.enterAnnotType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotType" ):
                listener.exitAnnotType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotType" ):
                return visitor.visitAnnotType(self)
            else:
                return visitor.visitChildren(self)




    def annotType(self):

        localctx = ScalaParser.AnnotTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_annotType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.simpleType(0)
            self.state = 338
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 335
                    self.annotation() 
                self.state = 340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stableId(self):
            return self.getTypedRuleContext(ScalaParser.StableIdContext,0)


        def types(self):
            return self.getTypedRuleContext(ScalaParser.TypesContext,0)


        def simpleType(self):
            return self.getTypedRuleContext(ScalaParser.SimpleTypeContext,0)


        def typeArgs(self):
            return self.getTypedRuleContext(ScalaParser.TypeArgsContext,0)


        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_simpleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleType" ):
                listener.enterSimpleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleType" ):
                listener.exitSimpleType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleType" ):
                return visitor.visitSimpleType(self)
            else:
                return visitor.visitChildren(self)



    def simpleType(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ScalaParser.SimpleTypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_simpleType, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScalaParser.T__4, ScalaParser.T__5, ScalaParser.Id]:
                self.state = 342
                self.stableId(0)
                self.state = 345
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 343
                    self.match(ScalaParser.T__2)
                    self.state = 344
                    self.match(ScalaParser.T__14)


                pass
            elif token in [ScalaParser.T__9]:
                self.state = 347
                self.match(ScalaParser.T__9)
                self.state = 348
                self.types()
                self.state = 349
                self.match(ScalaParser.T__10)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 360
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 358
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                    if la_ == 1:
                        localctx = ScalaParser.SimpleTypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simpleType)
                        self.state = 353
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 354
                        self.typeArgs()
                        pass

                    elif la_ == 2:
                        localctx = ScalaParser.SimpleTypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simpleType)
                        self.state = 355
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 356
                        self.match(ScalaParser.T__17)
                        self.state = 357
                        self.match(ScalaParser.Id)
                        pass

             
                self.state = 362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def types(self):
            return self.getTypedRuleContext(ScalaParser.TypesContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_typeArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgs" ):
                listener.enterTypeArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgs" ):
                listener.exitTypeArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArgs" ):
                return visitor.visitTypeArgs(self)
            else:
                return visitor.visitChildren(self)




    def typeArgs(self):

        localctx = ScalaParser.TypeArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_typeArgs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(ScalaParser.T__6)
            self.state = 364
            self.types()
            self.state = 365
            self.match(ScalaParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.Type_Context)
            else:
                return self.getTypedRuleContext(ScalaParser.Type_Context,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypes" ):
                listener.enterTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypes" ):
                listener.exitTypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypes" ):
                return visitor.visitTypes(self)
            else:
                return visitor.visitChildren(self)




    def types(self):

        localctx = ScalaParser.TypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_types)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.type_()
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__3:
                self.state = 368
                self.match(ScalaParser.T__3)
                self.state = 369
                self.type_()
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefinementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(ScalaParser.NL, 0)

        def refineStat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.RefineStatContext)
            else:
                return self.getTypedRuleContext(ScalaParser.RefineStatContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_refinement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefinement" ):
                listener.enterRefinement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefinement" ):
                listener.exitRefinement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefinement" ):
                return visitor.visitRefinement(self)
            else:
                return visitor.visitChildren(self)




    def refinement(self):

        localctx = ScalaParser.RefinementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_refinement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.NL:
                self.state = 375
                self.match(ScalaParser.NL)


            self.state = 378
            self.match(ScalaParser.T__12)
            self.state = 380 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 379
                self.refineStat()
                self.state = 382 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__14) | (1 << ScalaParser.T__15) | (1 << ScalaParser.T__47) | (1 << ScalaParser.T__55))) != 0)):
                    break

            self.state = 384
            self.match(ScalaParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefineStatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dcl(self):
            return self.getTypedRuleContext(ScalaParser.DclContext,0)


        def typeDef(self):
            return self.getTypedRuleContext(ScalaParser.TypeDefContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_refineStat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefineStat" ):
                listener.enterRefineStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefineStat" ):
                listener.exitRefineStat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefineStat" ):
                return visitor.visitRefineStat(self)
            else:
                return visitor.visitChildren(self)




    def refineStat(self):

        localctx = ScalaParser.RefineStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_refineStat)
        try:
            self.state = 389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 386
                self.dcl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 387
                self.match(ScalaParser.T__14)
                self.state = 388
                self.typeDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_typePat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePat" ):
                listener.enterTypePat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePat" ):
                listener.exitTypePat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePat" ):
                return visitor.visitTypePat(self)
            else:
                return visitor.visitChildren(self)




    def typePat(self):

        localctx = ScalaParser.TypePatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typePat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AscriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixType(self):
            return self.getTypedRuleContext(ScalaParser.InfixTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_ascription

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAscription" ):
                listener.enterAscription(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAscription" ):
                listener.exitAscription(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAscription" ):
                return visitor.visitAscription(self)
            else:
                return visitor.visitChildren(self)




    def ascription(self):

        localctx = ScalaParser.AscriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_ascription)
        try:
            self.state = 404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 393
                self.match(ScalaParser.T__18)
                self.state = 394
                self.infixType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 395
                self.match(ScalaParser.T__18)
                self.state = 397 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 396
                        self.annotation()

                    else:
                        raise NoViableAltException(self)
                    self.state = 399 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 401
                self.match(ScalaParser.T__18)
                self.state = 402
                self.match(ScalaParser.T__19)
                self.state = 403
                self.match(ScalaParser.T__20)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ScalaParser.ExprContext,0)


        def bindings(self):
            return self.getTypedRuleContext(ScalaParser.BindingsContext,0)


        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def expr1(self):
            return self.getTypedRuleContext(ScalaParser.Expr1Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = ScalaParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 412
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ScalaParser.T__9]:
                    self.state = 406
                    self.bindings()
                    pass
                elif token in [ScalaParser.T__21, ScalaParser.Id]:
                    self.state = 408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ScalaParser.T__21:
                        self.state = 407
                        self.match(ScalaParser.T__21)


                    self.state = 410
                    self.match(ScalaParser.Id)
                    pass
                elif token in [ScalaParser.T__19]:
                    self.state = 411
                    self.match(ScalaParser.T__19)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 414
                self.match(ScalaParser.T__8)
                self.state = 415
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.expr1()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ExprContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ExprContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.NL)
            else:
                return self.getToken(ScalaParser.NL, i)

        def enumerators(self):
            return self.getTypedRuleContext(ScalaParser.EnumeratorsContext,0)


        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def simpleExpr(self):
            return self.getTypedRuleContext(ScalaParser.SimpleExprContext,0)


        def simpleExpr1(self):
            return self.getTypedRuleContext(ScalaParser.SimpleExpr1Context,0)


        def argumentExprs(self):
            return self.getTypedRuleContext(ScalaParser.ArgumentExprsContext,0)


        def postfixExpr(self):
            return self.getTypedRuleContext(ScalaParser.PostfixExprContext,0)


        def ascription(self):
            return self.getTypedRuleContext(ScalaParser.AscriptionContext,0)


        def caseClauses(self):
            return self.getTypedRuleContext(ScalaParser.CaseClausesContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_expr1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr1" ):
                listener.enterExpr1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr1" ):
                listener.exitExpr1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr1" ):
                return visitor.visitExpr1(self)
            else:
                return visitor.visitChildren(self)




    def expr1(self):

        localctx = ScalaParser.Expr1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_expr1)
        self._la = 0 # Token type
        try:
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.match(ScalaParser.T__22)
                self.state = 420
                self.match(ScalaParser.T__9)
                self.state = 421
                self.expr()
                self.state = 422
                self.match(ScalaParser.T__10)
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScalaParser.NL:
                    self.state = 423
                    self.match(ScalaParser.NL)
                    self.state = 428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 429
                self.expr()
                self.state = 432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 430
                    self.match(ScalaParser.T__23)
                    self.state = 431
                    self.expr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 434
                self.match(ScalaParser.T__24)
                self.state = 435
                self.match(ScalaParser.T__9)
                self.state = 436
                self.expr()
                self.state = 437
                self.match(ScalaParser.T__10)
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScalaParser.NL:
                    self.state = 438
                    self.match(ScalaParser.NL)
                    self.state = 443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 444
                self.expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 446
                self.match(ScalaParser.T__25)
                self.state = 447
                self.expr()
                self.state = 450
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 448
                    self.match(ScalaParser.T__26)
                    self.state = 449
                    self.expr()


                self.state = 454
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 452
                    self.match(ScalaParser.T__27)
                    self.state = 453
                    self.expr()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 456
                self.match(ScalaParser.T__28)
                self.state = 457
                self.expr()
                self.state = 458
                self.match(ScalaParser.T__24)
                self.state = 459
                self.match(ScalaParser.T__9)
                self.state = 460
                self.expr()
                self.state = 461
                self.match(ScalaParser.T__10)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 463
                self.match(ScalaParser.T__29)
                self.state = 472
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ScalaParser.T__9]:
                    self.state = 464
                    self.match(ScalaParser.T__9)
                    self.state = 465
                    self.enumerators()
                    self.state = 466
                    self.match(ScalaParser.T__10)
                    pass
                elif token in [ScalaParser.T__12]:
                    self.state = 468
                    self.match(ScalaParser.T__12)
                    self.state = 469
                    self.enumerators()
                    self.state = 470
                    self.match(ScalaParser.T__13)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__30:
                    self.state = 474
                    self.match(ScalaParser.T__30)


                self.state = 477
                self.expr()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 479
                self.match(ScalaParser.T__31)
                self.state = 480
                self.expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 481
                self.match(ScalaParser.T__32)
                self.state = 483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 482
                    self.expr()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 494
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 490
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                    if la_ == 1:
                        self.state = 485
                        self.simpleExpr()
                        pass

                    elif la_ == 2:
                        self.state = 486
                        self.simpleExpr1(0)
                        self.state = 488
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ScalaParser.T__19:
                            self.state = 487
                            self.match(ScalaParser.T__19)


                        pass


                    self.state = 492
                    self.match(ScalaParser.T__2)


                self.state = 496
                self.match(ScalaParser.Id)
                self.state = 497
                self.match(ScalaParser.T__33)
                self.state = 498
                self.expr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 499
                self.simpleExpr1(0)
                self.state = 500
                self.argumentExprs()
                self.state = 501
                self.match(ScalaParser.T__33)
                self.state = 502
                self.expr()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 504
                self.postfixExpr()
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__18:
                    self.state = 505
                    self.ascription()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 508
                self.postfixExpr()
                self.state = 509
                self.match(ScalaParser.T__34)
                self.state = 510
                self.match(ScalaParser.T__12)
                self.state = 511
                self.caseClauses()
                self.state = 512
                self.match(ScalaParser.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ScalaParser.RULE_prefixDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixDef" ):
                listener.enterPrefixDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixDef" ):
                listener.exitPrefixDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixDef" ):
                return visitor.visitPrefixDef(self)
            else:
                return visitor.visitChildren(self)




    def prefixDef(self):

        localctx = ScalaParser.PrefixDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_prefixDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__35) | (1 << ScalaParser.T__36) | (1 << ScalaParser.T__37))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixExpr(self):
            return self.getTypedRuleContext(ScalaParser.InfixExprContext,0)


        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def prefixDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.PrefixDefContext)
            else:
                return self.getTypedRuleContext(ScalaParser.PrefixDefContext,i)


        def simpleExpr1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.SimpleExpr1Context)
            else:
                return self.getTypedRuleContext(ScalaParser.SimpleExpr1Context,i)


        def NL(self):
            return self.getToken(ScalaParser.NL, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_postfixExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpr" ):
                listener.enterPostfixExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpr" ):
                listener.exitPostfixExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpr" ):
                return visitor.visitPostfixExpr(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpr(self):

        localctx = ScalaParser.PostfixExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_postfixExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.infixExpr(0)
            self.state = 520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 519
                self.match(ScalaParser.Id)


            self.state = 527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 522
                    self.prefixDef()
                    self.state = 523
                    self.simpleExpr1(0) 
                self.state = 529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.NL:
                self.state = 530
                self.match(ScalaParser.NL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfixExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixExpr(self):
            return self.getTypedRuleContext(ScalaParser.PrefixExprContext,0)


        def infixExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.InfixExprContext)
            else:
                return self.getTypedRuleContext(ScalaParser.InfixExprContext,i)


        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def NL(self):
            return self.getToken(ScalaParser.NL, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_infixExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixExpr" ):
                listener.enterInfixExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixExpr" ):
                listener.exitInfixExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfixExpr" ):
                return visitor.visitInfixExpr(self)
            else:
                return visitor.visitChildren(self)



    def infixExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ScalaParser.InfixExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_infixExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.prefixExpr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 544
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ScalaParser.InfixExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_infixExpr)
                    self.state = 536
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 537
                    self.match(ScalaParser.Id)
                    self.state = 539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ScalaParser.NL:
                        self.state = 538
                        self.match(ScalaParser.NL)


                    self.state = 541
                    self.infixExpr(2) 
                self.state = 546
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrefixExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleExpr(self):
            return self.getTypedRuleContext(ScalaParser.SimpleExprContext,0)


        def simpleExpr1(self):
            return self.getTypedRuleContext(ScalaParser.SimpleExpr1Context,0)


        def prefixDef(self):
            return self.getTypedRuleContext(ScalaParser.PrefixDefContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_prefixExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixExpr" ):
                listener.enterPrefixExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixExpr" ):
                listener.exitPrefixExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixExpr" ):
                return visitor.visitPrefixExpr(self)
            else:
                return visitor.visitChildren(self)




    def prefixExpr(self):

        localctx = ScalaParser.PrefixExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_prefixExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 547
                self.prefixDef()


            self.state = 555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 550
                self.simpleExpr()
                pass

            elif la_ == 2:
                self.state = 551
                self.simpleExpr1(0)
                self.state = 553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 552
                    self.match(ScalaParser.T__19)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classTemplate(self):
            return self.getTypedRuleContext(ScalaParser.ClassTemplateContext,0)


        def templateBody(self):
            return self.getTypedRuleContext(ScalaParser.TemplateBodyContext,0)


        def blockExpr(self):
            return self.getTypedRuleContext(ScalaParser.BlockExprContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_simpleExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr" ):
                listener.enterSimpleExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr" ):
                listener.exitSimpleExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExpr" ):
                return visitor.visitSimpleExpr(self)
            else:
                return visitor.visitChildren(self)




    def simpleExpr(self):

        localctx = ScalaParser.SimpleExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_simpleExpr)
        try:
            self.state = 563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScalaParser.T__38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.match(ScalaParser.T__38)
                self.state = 560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 558
                    self.classTemplate()
                    pass

                elif la_ == 2:
                    self.state = 559
                    self.templateBody()
                    pass


                pass
            elif token in [ScalaParser.T__12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 562
                self.blockExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleExpr1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(ScalaParser.LiteralContext,0)


        def stableId(self):
            return self.getTypedRuleContext(ScalaParser.StableIdContext,0)


        def exprs(self):
            return self.getTypedRuleContext(ScalaParser.ExprsContext,0)


        def simpleExpr(self):
            return self.getTypedRuleContext(ScalaParser.SimpleExprContext,0)


        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def typeArgs(self):
            return self.getTypedRuleContext(ScalaParser.TypeArgsContext,0)


        def simpleExpr1(self):
            return self.getTypedRuleContext(ScalaParser.SimpleExpr1Context,0)


        def argumentExprs(self):
            return self.getTypedRuleContext(ScalaParser.ArgumentExprsContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_simpleExpr1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleExpr1" ):
                listener.enterSimpleExpr1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleExpr1" ):
                listener.exitSimpleExpr1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleExpr1" ):
                return visitor.visitSimpleExpr1(self)
            else:
                return visitor.visitChildren(self)



    def simpleExpr1(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ScalaParser.SimpleExpr1Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_simpleExpr1, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 566
                self.literal()
                pass

            elif la_ == 2:
                self.state = 567
                self.stableId(0)
                pass

            elif la_ == 3:
                self.state = 568
                self.match(ScalaParser.T__19)
                pass

            elif la_ == 4:
                self.state = 569
                self.match(ScalaParser.T__9)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__22) | (1 << ScalaParser.T__24) | (1 << ScalaParser.T__25) | (1 << ScalaParser.T__28) | (1 << ScalaParser.T__29) | (1 << ScalaParser.T__31) | (1 << ScalaParser.T__32) | (1 << ScalaParser.T__35) | (1 << ScalaParser.T__36) | (1 << ScalaParser.T__37) | (1 << ScalaParser.T__38) | (1 << ScalaParser.Id) | (1 << ScalaParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)))) != 0):
                    self.state = 570
                    self.exprs()


                self.state = 573
                self.match(ScalaParser.T__10)
                pass

            elif la_ == 5:
                self.state = 574
                self.simpleExpr()
                self.state = 575
                self.match(ScalaParser.T__2)
                self.state = 576
                self.match(ScalaParser.Id)
                pass

            elif la_ == 6:
                self.state = 578
                self.simpleExpr()
                self.state = 579
                self.typeArgs()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 598
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 596
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                    if la_ == 1:
                        localctx = ScalaParser.SimpleExpr1Context(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simpleExpr1)
                        self.state = 583
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 585
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ScalaParser.T__19:
                            self.state = 584
                            self.match(ScalaParser.T__19)


                        self.state = 587
                        self.match(ScalaParser.T__2)
                        self.state = 588
                        self.match(ScalaParser.Id)
                        pass

                    elif la_ == 2:
                        localctx = ScalaParser.SimpleExpr1Context(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simpleExpr1)
                        self.state = 589
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ScalaParser.T__19:
                            self.state = 590
                            self.match(ScalaParser.T__19)


                        self.state = 593
                        self.typeArgs()
                        pass

                    elif la_ == 3:
                        localctx = ScalaParser.SimpleExpr1Context(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simpleExpr1)
                        self.state = 594
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 595
                        self.argumentExprs()
                        pass

             
                self.state = 600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ExprContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ExprContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_exprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprs" ):
                listener.enterExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprs" ):
                listener.exitExprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprs" ):
                return visitor.visitExprs(self)
            else:
                return visitor.visitChildren(self)




    def exprs(self):

        localctx = ScalaParser.ExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_exprs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.expr()
            self.state = 606
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 602
                    self.match(ScalaParser.T__3)
                    self.state = 603
                    self.expr() 
                self.state = 608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(ScalaParser.ArgsContext,0)


        def blockExpr(self):
            return self.getTypedRuleContext(ScalaParser.BlockExprContext,0)


        def NL(self):
            return self.getToken(ScalaParser.NL, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_argumentExprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExprs" ):
                listener.enterArgumentExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExprs" ):
                listener.exitArgumentExprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExprs" ):
                return visitor.visitArgumentExprs(self)
            else:
                return visitor.visitChildren(self)




    def argumentExprs(self):

        localctx = ScalaParser.ArgumentExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_argumentExprs)
        self._la = 0 # Token type
        try:
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.match(ScalaParser.T__9)
                self.state = 610
                self.args()
                self.state = 611
                self.match(ScalaParser.T__10)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.match(ScalaParser.T__12)
                self.state = 614
                self.args()
                self.state = 615
                self.match(ScalaParser.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.NL:
                    self.state = 617
                    self.match(ScalaParser.NL)


                self.state = 620
                self.blockExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprs(self):
            return self.getTypedRuleContext(ScalaParser.ExprsContext,0)


        def postfixExpr(self):
            return self.getTypedRuleContext(ScalaParser.PostfixExprContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = ScalaParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_args)
        self._la = 0 # Token type
        try:
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__22) | (1 << ScalaParser.T__24) | (1 << ScalaParser.T__25) | (1 << ScalaParser.T__28) | (1 << ScalaParser.T__29) | (1 << ScalaParser.T__31) | (1 << ScalaParser.T__32) | (1 << ScalaParser.T__35) | (1 << ScalaParser.T__36) | (1 << ScalaParser.T__37) | (1 << ScalaParser.T__38) | (1 << ScalaParser.Id) | (1 << ScalaParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)))) != 0):
                    self.state = 623
                    self.exprs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 626
                    self.exprs()
                    self.state = 627
                    self.match(ScalaParser.T__3)


                self.state = 631
                self.postfixExpr()
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__18) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__20))) != 0):
                    self.state = 632
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__18) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__20))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseClauses(self):
            return self.getTypedRuleContext(ScalaParser.CaseClausesContext,0)


        def block(self):
            return self.getTypedRuleContext(ScalaParser.BlockContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_blockExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockExpr" ):
                listener.enterBlockExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockExpr" ):
                listener.exitBlockExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockExpr" ):
                return visitor.visitBlockExpr(self)
            else:
                return visitor.visitChildren(self)




    def blockExpr(self):

        localctx = ScalaParser.BlockExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_blockExpr)
        try:
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 637
                self.match(ScalaParser.T__12)
                self.state = 638
                self.caseClauses()
                self.state = 639
                self.match(ScalaParser.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 641
                self.match(ScalaParser.T__12)
                self.state = 642
                self.block()
                self.state = 643
                self.match(ScalaParser.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.BlockStatContext)
            else:
                return self.getTypedRuleContext(ScalaParser.BlockStatContext,i)


        def resultExpr(self):
            return self.getTypedRuleContext(ScalaParser.ResultExprContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ScalaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 647
                    self.blockStat()

                else:
                    raise NoViableAltException(self)
                self.state = 650 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__22) | (1 << ScalaParser.T__24) | (1 << ScalaParser.T__25) | (1 << ScalaParser.T__28) | (1 << ScalaParser.T__29) | (1 << ScalaParser.T__31) | (1 << ScalaParser.T__32) | (1 << ScalaParser.T__35) | (1 << ScalaParser.T__36) | (1 << ScalaParser.T__37) | (1 << ScalaParser.T__38) | (1 << ScalaParser.Id) | (1 << ScalaParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)))) != 0):
                self.state = 652
                self.resultExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_(self):
            return self.getTypedRuleContext(ScalaParser.Import_Context,0)


        def def_(self):
            return self.getTypedRuleContext(ScalaParser.Def_Context,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotationContext,i)


        def tmplDef(self):
            return self.getTypedRuleContext(ScalaParser.TmplDefContext,0)


        def localModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.LocalModifierContext)
            else:
                return self.getTypedRuleContext(ScalaParser.LocalModifierContext,i)


        def expr1(self):
            return self.getTypedRuleContext(ScalaParser.Expr1Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_blockStat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStat" ):
                listener.enterBlockStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStat" ):
                listener.exitBlockStat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStat" ):
                return visitor.visitBlockStat(self)
            else:
                return visitor.visitChildren(self)




    def blockStat(self):

        localctx = ScalaParser.BlockStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_blockStat)
        self._la = 0 # Token type
        try:
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                self.import_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScalaParser.T__43:
                    self.state = 656
                    self.annotation()
                    self.state = 661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__21 or _la==ScalaParser.T__39:
                    self.state = 662
                    _la = self._input.LA(1)
                    if not(_la==ScalaParser.T__21 or _la==ScalaParser.T__39):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 665
                self.def_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScalaParser.T__43:
                    self.state = 666
                    self.annotation()
                    self.state = 671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__21) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51))) != 0):
                    self.state = 672
                    self.localModifier()
                    self.state = 677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 678
                self.tmplDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 679
                self.expr1()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResultExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr1(self):
            return self.getTypedRuleContext(ScalaParser.Expr1Context,0)


        def block(self):
            return self.getTypedRuleContext(ScalaParser.BlockContext,0)


        def bindings(self):
            return self.getTypedRuleContext(ScalaParser.BindingsContext,0)


        def compoundType(self):
            return self.getTypedRuleContext(ScalaParser.CompoundTypeContext,0)


        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_resultExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResultExpr" ):
                listener.enterResultExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResultExpr" ):
                listener.exitResultExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResultExpr" ):
                return visitor.visitResultExpr(self)
            else:
                return visitor.visitChildren(self)




    def resultExpr(self):

        localctx = ScalaParser.ResultExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_resultExpr)
        self._la = 0 # Token type
        try:
            self.state = 698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 682
                self.expr1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 693
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ScalaParser.T__9]:
                    self.state = 683
                    self.bindings()
                    pass
                elif token in [ScalaParser.T__19, ScalaParser.T__21, ScalaParser.Id]:
                    self.state = 689
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ScalaParser.T__21, ScalaParser.Id]:
                        self.state = 685
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ScalaParser.T__21:
                            self.state = 684
                            self.match(ScalaParser.T__21)


                        self.state = 687
                        self.match(ScalaParser.Id)
                        pass
                    elif token in [ScalaParser.T__19]:
                        self.state = 688
                        self.match(ScalaParser.T__19)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 691
                    self.match(ScalaParser.T__18)
                    self.state = 692
                    self.compoundType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 695
                self.match(ScalaParser.T__8)
                self.state = 696
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.GeneratorContext)
            else:
                return self.getTypedRuleContext(ScalaParser.GeneratorContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_enumerators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerators" ):
                listener.enterEnumerators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerators" ):
                listener.exitEnumerators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerators" ):
                return visitor.visitEnumerators(self)
            else:
                return visitor.visitChildren(self)




    def enumerators(self):

        localctx = ScalaParser.EnumeratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_enumerators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 700
                self.generator()
                self.state = 703 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__19) | (1 << ScalaParser.Id) | (1 << ScalaParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)) | (1 << (ScalaParser.Varid - 64)) | (1 << (ScalaParser.BoundVarid - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.Pattern1Context)
            else:
                return self.getTypedRuleContext(ScalaParser.Pattern1Context,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ExprContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ExprContext,i)


        def guard_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.Guard_Context)
            else:
                return self.getTypedRuleContext(ScalaParser.Guard_Context,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_generator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerator" ):
                listener.enterGenerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerator" ):
                listener.exitGenerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenerator" ):
                return visitor.visitGenerator(self)
            else:
                return visitor.visitChildren(self)




    def generator(self):

        localctx = ScalaParser.GeneratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_generator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.pattern1()
            self.state = 706
            self.match(ScalaParser.T__40)
            self.state = 707
            self.expr()
            self.state = 715
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 713
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ScalaParser.T__22]:
                        self.state = 708
                        self.guard_()
                        pass
                    elif token in [ScalaParser.T__0, ScalaParser.T__1, ScalaParser.T__4, ScalaParser.T__5, ScalaParser.T__9, ScalaParser.T__19, ScalaParser.Id, ScalaParser.BooleanLiteral, ScalaParser.CharacterLiteral, ScalaParser.SymbolLiteral, ScalaParser.IntegerLiteral, ScalaParser.StringLiteral, ScalaParser.FloatingPointLiteral, ScalaParser.Varid, ScalaParser.BoundVarid]:
                        self.state = 709
                        self.pattern1()
                        self.state = 710
                        self.match(ScalaParser.T__33)
                        self.state = 711
                        self.expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 717
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.CaseClauseContext)
            else:
                return self.getTypedRuleContext(ScalaParser.CaseClauseContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_caseClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClauses" ):
                listener.enterCaseClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClauses" ):
                listener.exitCaseClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseClauses" ):
                return visitor.visitCaseClauses(self)
            else:
                return visitor.visitChildren(self)




    def caseClauses(self):

        localctx = ScalaParser.CaseClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_caseClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 718
                self.caseClause()
                self.state = 721 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ScalaParser.T__41):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(ScalaParser.PatternContext,0)


        def block(self):
            return self.getTypedRuleContext(ScalaParser.BlockContext,0)


        def guard_(self):
            return self.getTypedRuleContext(ScalaParser.Guard_Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_caseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClause" ):
                listener.enterCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClause" ):
                listener.exitCaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseClause" ):
                return visitor.visitCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def caseClause(self):

        localctx = ScalaParser.CaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_caseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(ScalaParser.T__41)
            self.state = 724
            self.pattern()
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__22:
                self.state = 725
                self.guard_()


            self.state = 728
            self.match(ScalaParser.T__8)
            self.state = 729
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Guard_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpr(self):
            return self.getTypedRuleContext(ScalaParser.PostfixExprContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_guard_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard_" ):
                listener.enterGuard_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard_" ):
                listener.exitGuard_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard_" ):
                return visitor.visitGuard_(self)
            else:
                return visitor.visitChildren(self)




    def guard_(self):

        localctx = ScalaParser.Guard_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_guard_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(ScalaParser.T__22)
            self.state = 732
            self.postfixExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.Pattern1Context)
            else:
                return self.getTypedRuleContext(ScalaParser.Pattern1Context,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = ScalaParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.pattern1()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__42:
                self.state = 735
                self.match(ScalaParser.T__42)
                self.state = 736
                self.pattern1()
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePat(self):
            return self.getTypedRuleContext(ScalaParser.TypePatContext,0)


        def BoundVarid(self):
            return self.getToken(ScalaParser.BoundVarid, 0)

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def pattern2(self):
            return self.getTypedRuleContext(ScalaParser.Pattern2Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_pattern1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern1" ):
                listener.enterPattern1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern1" ):
                listener.exitPattern1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern1" ):
                return visitor.visitPattern1(self)
            else:
                return visitor.visitChildren(self)




    def pattern1(self):

        localctx = ScalaParser.Pattern1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pattern1)
        self._la = 0 # Token type
        try:
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                _la = self._input.LA(1)
                if not(((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (ScalaParser.T__19 - 20)) | (1 << (ScalaParser.Id - 20)) | (1 << (ScalaParser.BoundVarid - 20)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 743
                self.match(ScalaParser.T__18)
                self.state = 744
                self.typePat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                self.pattern2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def pattern3(self):
            return self.getTypedRuleContext(ScalaParser.Pattern3Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_pattern2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern2" ):
                listener.enterPattern2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern2" ):
                listener.exitPattern2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern2" ):
                return visitor.visitPattern2(self)
            else:
                return visitor.visitChildren(self)




    def pattern2(self):

        localctx = ScalaParser.Pattern2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_pattern2)
        self._la = 0 # Token type
        try:
            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.match(ScalaParser.Id)
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__43:
                    self.state = 749
                    self.match(ScalaParser.T__43)
                    self.state = 750
                    self.pattern3()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.pattern3()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.SimplePatternContext)
            else:
                return self.getTypedRuleContext(ScalaParser.SimplePatternContext,i)


        def Id(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.Id)
            else:
                return self.getToken(ScalaParser.Id, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.NL)
            else:
                return self.getToken(ScalaParser.NL, i)

        def getRuleIndex(self):
            return ScalaParser.RULE_pattern3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern3" ):
                listener.enterPattern3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern3" ):
                listener.exitPattern3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern3" ):
                return visitor.visitPattern3(self)
            else:
                return visitor.visitChildren(self)




    def pattern3(self):

        localctx = ScalaParser.Pattern3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_pattern3)
        self._la = 0 # Token type
        try:
            self.state = 768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 756
                self.simplePattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 757
                self.simplePattern()
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScalaParser.Id:
                    self.state = 758
                    self.match(ScalaParser.Id)
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ScalaParser.NL:
                        self.state = 759
                        self.match(ScalaParser.NL)


                    self.state = 762
                    self.simplePattern()
                    self.state = 767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Varid(self):
            return self.getToken(ScalaParser.Varid, 0)

        def literal(self):
            return self.getTypedRuleContext(ScalaParser.LiteralContext,0)


        def stableId(self):
            return self.getTypedRuleContext(ScalaParser.StableIdContext,0)


        def patterns(self):
            return self.getTypedRuleContext(ScalaParser.PatternsContext,0)


        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_simplePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplePattern" ):
                listener.enterSimplePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplePattern" ):
                listener.exitSimplePattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplePattern" ):
                return visitor.visitSimplePattern(self)
            else:
                return visitor.visitChildren(self)




    def simplePattern(self):

        localctx = ScalaParser.SimplePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_simplePattern)
        self._la = 0 # Token type
        try:
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 770
                self.match(ScalaParser.T__19)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(ScalaParser.Varid)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 772
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 773
                self.stableId(0)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__9:
                    self.state = 774
                    self.match(ScalaParser.T__9)
                    self.state = 776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__19) | (1 << ScalaParser.Id) | (1 << ScalaParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)) | (1 << (ScalaParser.Varid - 64)) | (1 << (ScalaParser.BoundVarid - 64)))) != 0):
                        self.state = 775
                        self.patterns()


                    self.state = 778
                    self.match(ScalaParser.T__10)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 781
                self.stableId(0)
                self.state = 782
                self.match(ScalaParser.T__9)
                self.state = 786
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 783
                    self.patterns()
                    self.state = 784
                    self.match(ScalaParser.T__3)


                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.Id:
                    self.state = 788
                    self.match(ScalaParser.Id)
                    self.state = 789
                    self.match(ScalaParser.T__43)


                self.state = 792
                self.match(ScalaParser.T__19)
                self.state = 793
                self.match(ScalaParser.T__20)
                self.state = 794
                self.match(ScalaParser.T__10)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 796
                self.match(ScalaParser.T__9)
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__19) | (1 << ScalaParser.Id) | (1 << ScalaParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)) | (1 << (ScalaParser.Varid - 64)) | (1 << (ScalaParser.BoundVarid - 64)))) != 0):
                    self.state = 797
                    self.patterns()


                self.state = 800
                self.match(ScalaParser.T__10)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(ScalaParser.PatternContext,0)


        def patterns(self):
            return self.getTypedRuleContext(ScalaParser.PatternsContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatterns" ):
                listener.enterPatterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatterns" ):
                listener.exitPatterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatterns" ):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)




    def patterns(self):

        localctx = ScalaParser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_patterns)
        try:
            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 803
                self.pattern()
                self.state = 806
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 804
                    self.match(ScalaParser.T__3)
                    self.state = 805
                    self.patterns()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self.match(ScalaParser.T__19)
                self.state = 809
                self.match(ScalaParser.T__20)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParamClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variantTypeParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.VariantTypeParamContext)
            else:
                return self.getTypedRuleContext(ScalaParser.VariantTypeParamContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_typeParamClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParamClause" ):
                listener.enterTypeParamClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParamClause" ):
                listener.exitTypeParamClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParamClause" ):
                return visitor.visitTypeParamClause(self)
            else:
                return visitor.visitChildren(self)




    def typeParamClause(self):

        localctx = ScalaParser.TypeParamClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typeParamClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(ScalaParser.T__6)
            self.state = 813
            self.variantTypeParam()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__3:
                self.state = 814
                self.match(ScalaParser.T__3)
                self.state = 815
                self.variantTypeParam()
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 821
            self.match(ScalaParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunTypeParamClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.TypeParamContext)
            else:
                return self.getTypedRuleContext(ScalaParser.TypeParamContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_funTypeParamClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunTypeParamClause" ):
                listener.enterFunTypeParamClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunTypeParamClause" ):
                listener.exitFunTypeParamClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunTypeParamClause" ):
                return visitor.visitFunTypeParamClause(self)
            else:
                return visitor.visitChildren(self)




    def funTypeParamClause(self):

        localctx = ScalaParser.FunTypeParamClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_funTypeParamClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(ScalaParser.T__6)
            self.state = 824
            self.typeParam()
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__3:
                self.state = 825
                self.match(ScalaParser.T__3)
                self.state = 826
                self.typeParam()
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 832
            self.match(ScalaParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariantTypeParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParam(self):
            return self.getTypedRuleContext(ScalaParser.TypeParamContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_variantTypeParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariantTypeParam" ):
                listener.enterVariantTypeParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariantTypeParam" ):
                listener.exitVariantTypeParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariantTypeParam" ):
                return visitor.visitVariantTypeParam(self)
            else:
                return visitor.visitChildren(self)




    def variantTypeParam(self):

        localctx = ScalaParser.VariantTypeParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_variantTypeParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__43:
                self.state = 834
                self.annotation()
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__0 or _la==ScalaParser.T__35:
                self.state = 840
                _la = self._input.LA(1)
                if not(_la==ScalaParser.T__0 or _la==ScalaParser.T__35):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 843
            self.typeParam()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def typeParamClause(self):
            return self.getTypedRuleContext(ScalaParser.TypeParamClauseContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.Type_Context)
            else:
                return self.getTypedRuleContext(ScalaParser.Type_Context,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_typeParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParam" ):
                listener.enterTypeParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParam" ):
                listener.exitTypeParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParam" ):
                return visitor.visitTypeParam(self)
            else:
                return visitor.visitChildren(self)




    def typeParam(self):

        localctx = ScalaParser.TypeParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_typeParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            _la = self._input.LA(1)
            if not(_la==ScalaParser.T__19 or _la==ScalaParser.Id):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__6:
                self.state = 846
                self.typeParamClause()


            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__44:
                self.state = 849
                self.match(ScalaParser.T__44)
                self.state = 850
                self.type_()


            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__45:
                self.state = 853
                self.match(ScalaParser.T__45)
                self.state = 854
                self.type_()


            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__46:
                self.state = 857
                self.match(ScalaParser.T__46)
                self.state = 858
                self.type_()
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__18:
                self.state = 864
                self.match(ScalaParser.T__18)
                self.state = 865
                self.type_()
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def paramClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ParamClauseContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ParamClauseContext,i)


        def params(self):
            return self.getTypedRuleContext(ScalaParser.ParamsContext,0)


        def NL(self):
            return self.getToken(ScalaParser.NL, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_paramClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamClauses" ):
                listener.enterParamClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamClauses" ):
                listener.exitParamClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamClauses" ):
                return visitor.visitParamClauses(self)
            else:
                return visitor.visitChildren(self)




    def paramClauses(self):

        localctx = ScalaParser.ParamClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_paramClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 871
                    self.paramClause() 
                self.state = 876
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

            self.state = 885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.NL:
                    self.state = 877
                    self.match(ScalaParser.NL)


                self.state = 880
                self.match(ScalaParser.T__9)
                self.state = 881
                self.match(ScalaParser.T__21)
                self.state = 882
                self.params()
                self.state = 883
                self.match(ScalaParser.T__10)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(ScalaParser.NL, 0)

        def params(self):
            return self.getTypedRuleContext(ScalaParser.ParamsContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_paramClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamClause" ):
                listener.enterParamClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamClause" ):
                listener.exitParamClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamClause" ):
                return visitor.visitParamClause(self)
            else:
                return visitor.visitChildren(self)




    def paramClause(self):

        localctx = ScalaParser.ParamClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_paramClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.NL:
                self.state = 887
                self.match(ScalaParser.NL)


            self.state = 890
            self.match(ScalaParser.T__9)
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__43 or _la==ScalaParser.Id:
                self.state = 891
                self.params()


            self.state = 894
            self.match(ScalaParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ParamContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ParamContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParams" ):
                listener.enterParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParams" ):
                listener.exitParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParams" ):
                return visitor.visitParams(self)
            else:
                return visitor.visitChildren(self)




    def params(self):

        localctx = ScalaParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.param()
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__3:
                self.state = 897
                self.match(ScalaParser.T__3)
                self.state = 898
                self.param()
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotationContext,i)


        def paramType(self):
            return self.getTypedRuleContext(ScalaParser.ParamTypeContext,0)


        def expr(self):
            return self.getTypedRuleContext(ScalaParser.ExprContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = ScalaParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__43:
                self.state = 904
                self.annotation()
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 910
            self.match(ScalaParser.Id)
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__18:
                self.state = 911
                self.match(ScalaParser.T__18)
                self.state = 912
                self.paramType()


            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__33:
                self.state = 915
                self.match(ScalaParser.T__33)
                self.state = 916
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_paramType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamType" ):
                listener.enterParamType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamType" ):
                listener.exitParamType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamType" ):
                return visitor.visitParamType(self)
            else:
                return visitor.visitChildren(self)




    def paramType(self):

        localctx = ScalaParser.ParamTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_paramType)
        try:
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                self.type_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.match(ScalaParser.T__8)
                self.state = 921
                self.type_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 922
                self.type_()
                self.state = 923
                self.match(ScalaParser.T__20)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParamClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classParamClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ClassParamClauseContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ClassParamClauseContext,i)


        def classParams(self):
            return self.getTypedRuleContext(ScalaParser.ClassParamsContext,0)


        def NL(self):
            return self.getToken(ScalaParser.NL, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_classParamClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParamClauses" ):
                listener.enterClassParamClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParamClauses" ):
                listener.exitClassParamClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassParamClauses" ):
                return visitor.visitClassParamClauses(self)
            else:
                return visitor.visitChildren(self)




    def classParamClauses(self):

        localctx = ScalaParser.ClassParamClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_classParamClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 927
                    self.classParamClause() 
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.NL:
                    self.state = 933
                    self.match(ScalaParser.NL)


                self.state = 936
                self.match(ScalaParser.T__9)
                self.state = 937
                self.match(ScalaParser.T__21)
                self.state = 938
                self.classParams()
                self.state = 939
                self.match(ScalaParser.T__10)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParamClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(ScalaParser.NL, 0)

        def classParams(self):
            return self.getTypedRuleContext(ScalaParser.ClassParamsContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_classParamClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParamClause" ):
                listener.enterClassParamClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParamClause" ):
                listener.exitClassParamClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassParamClause" ):
                return visitor.visitClassParamClause(self)
            else:
                return visitor.visitChildren(self)




    def classParamClause(self):

        localctx = ScalaParser.ClassParamClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_classParamClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.NL:
                self.state = 943
                self.match(ScalaParser.NL)


            self.state = 946
            self.match(ScalaParser.T__9)
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__15) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__43) | (1 << ScalaParser.T__47) | (1 << ScalaParser.T__48) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51) | (1 << ScalaParser.T__52) | (1 << ScalaParser.T__53) | (1 << ScalaParser.Id))) != 0):
                self.state = 947
                self.classParams()


            self.state = 950
            self.match(ScalaParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ClassParamContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ClassParamContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_classParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParams" ):
                listener.enterClassParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParams" ):
                listener.exitClassParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassParams" ):
                return visitor.visitClassParams(self)
            else:
                return visitor.visitChildren(self)




    def classParams(self):

        localctx = ScalaParser.ClassParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_classParams)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.classParam()
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__3:
                self.state = 953
                self.match(ScalaParser.T__3)
                self.state = 954
                self.classParam()
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def paramType(self):
            return self.getTypedRuleContext(ScalaParser.ParamTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotationContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ModifierContext,i)


        def expr(self):
            return self.getTypedRuleContext(ScalaParser.ExprContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_classParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParam" ):
                listener.enterClassParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParam" ):
                listener.exitClassParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassParam" ):
                return visitor.visitClassParam(self)
            else:
                return visitor.visitChildren(self)




    def classParam(self):

        localctx = ScalaParser.ClassParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_classParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__43:
                self.state = 960
                self.annotation()
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__21) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__48) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51) | (1 << ScalaParser.T__52) | (1 << ScalaParser.T__53))) != 0):
                self.state = 966
                self.modifier()
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__15 or _la==ScalaParser.T__47:
                self.state = 972
                _la = self._input.LA(1)
                if not(_la==ScalaParser.T__15 or _la==ScalaParser.T__47):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 975
            self.match(ScalaParser.Id)
            self.state = 976
            self.match(ScalaParser.T__18)
            self.state = 977
            self.paramType()
            self.state = 980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__33:
                self.state = 978
                self.match(ScalaParser.T__33)
                self.state = 979
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binding(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.BindingContext)
            else:
                return self.getTypedRuleContext(ScalaParser.BindingContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_bindings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBindings" ):
                listener.enterBindings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBindings" ):
                listener.exitBindings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBindings" ):
                return visitor.visitBindings(self)
            else:
                return visitor.visitChildren(self)




    def bindings(self):

        localctx = ScalaParser.BindingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_bindings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(ScalaParser.T__9)
            self.state = 983
            self.binding()
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__3:
                self.state = 984
                self.match(ScalaParser.T__3)
                self.state = 985
                self.binding()
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 991
            self.match(ScalaParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BindingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinding" ):
                listener.enterBinding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinding" ):
                listener.exitBinding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinding" ):
                return visitor.visitBinding(self)
            else:
                return visitor.visitChildren(self)




    def binding(self):

        localctx = ScalaParser.BindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_binding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            _la = self._input.LA(1)
            if not(_la==ScalaParser.T__19 or _la==ScalaParser.Id):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__18:
                self.state = 994
                self.match(ScalaParser.T__18)
                self.state = 995
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localModifier(self):
            return self.getTypedRuleContext(ScalaParser.LocalModifierContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(ScalaParser.AccessModifierContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = ScalaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_modifier)
        try:
            self.state = 1001
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScalaParser.T__21, ScalaParser.T__39, ScalaParser.T__49, ScalaParser.T__50, ScalaParser.T__51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 998
                self.localModifier()
                pass
            elif token in [ScalaParser.T__52, ScalaParser.T__53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.accessModifier()
                pass
            elif token in [ScalaParser.T__48]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1000
                self.match(ScalaParser.T__48)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ScalaParser.RULE_localModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalModifier" ):
                listener.enterLocalModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalModifier" ):
                listener.exitLocalModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalModifier" ):
                return visitor.visitLocalModifier(self)
            else:
                return visitor.visitChildren(self)




    def localModifier(self):

        localctx = ScalaParser.LocalModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_localModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__21) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accessQualifier(self):
            return self.getTypedRuleContext(ScalaParser.AccessQualifierContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_accessModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessModifier" ):
                listener.enterAccessModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessModifier" ):
                listener.exitAccessModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessModifier" ):
                return visitor.visitAccessModifier(self)
            else:
                return visitor.visitChildren(self)




    def accessModifier(self):

        localctx = ScalaParser.AccessModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_accessModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            _la = self._input.LA(1)
            if not(_la==ScalaParser.T__52 or _la==ScalaParser.T__53):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__6:
                self.state = 1006
                self.accessQualifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_accessQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessQualifier" ):
                listener.enterAccessQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessQualifier" ):
                listener.exitAccessQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessQualifier" ):
                return visitor.visitAccessQualifier(self)
            else:
                return visitor.visitChildren(self)




    def accessQualifier(self):

        localctx = ScalaParser.AccessQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_accessQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(ScalaParser.T__6)
            self.state = 1010
            _la = self._input.LA(1)
            if not(_la==ScalaParser.T__4 or _la==ScalaParser.Id):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1011
            self.match(ScalaParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleType(self):
            return self.getTypedRuleContext(ScalaParser.SimpleTypeContext,0)


        def argumentExprs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ArgumentExprsContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ArgumentExprsContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = ScalaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(ScalaParser.T__43)
            self.state = 1014
            self.simpleType(0)
            self.state = 1018
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1015
                    self.argumentExprs() 
                self.state = 1020
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstrAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleType(self):
            return self.getTypedRuleContext(ScalaParser.SimpleTypeContext,0)


        def argumentExprs(self):
            return self.getTypedRuleContext(ScalaParser.ArgumentExprsContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_constrAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstrAnnotation" ):
                listener.enterConstrAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstrAnnotation" ):
                listener.exitConstrAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstrAnnotation" ):
                return visitor.visitConstrAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def constrAnnotation(self):

        localctx = ScalaParser.ConstrAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_constrAnnotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(ScalaParser.T__43)
            self.state = 1022
            self.simpleType(0)
            self.state = 1023
            self.argumentExprs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(ScalaParser.NL, 0)

        def selfType(self):
            return self.getTypedRuleContext(ScalaParser.SelfTypeContext,0)


        def templateStat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.TemplateStatContext)
            else:
                return self.getTypedRuleContext(ScalaParser.TemplateStatContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_templateBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateBody" ):
                listener.enterTemplateBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateBody" ):
                listener.exitTemplateBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateBody" ):
                return visitor.visitTemplateBody(self)
            else:
                return visitor.visitChildren(self)




    def templateBody(self):

        localctx = ScalaParser.TemplateBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_templateBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.NL:
                self.state = 1025
                self.match(ScalaParser.NL)


            self.state = 1028
            self.match(ScalaParser.T__12)
            self.state = 1030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1029
                self.selfType()


            self.state = 1033 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1032
                self.templateStat()
                self.state = 1035 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12) | (1 << ScalaParser.T__14) | (1 << ScalaParser.T__15) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__22) | (1 << ScalaParser.T__24) | (1 << ScalaParser.T__25) | (1 << ScalaParser.T__28) | (1 << ScalaParser.T__29) | (1 << ScalaParser.T__31) | (1 << ScalaParser.T__32) | (1 << ScalaParser.T__35) | (1 << ScalaParser.T__36) | (1 << ScalaParser.T__37) | (1 << ScalaParser.T__38) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__41) | (1 << ScalaParser.T__43) | (1 << ScalaParser.T__47) | (1 << ScalaParser.T__48) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51) | (1 << ScalaParser.T__52) | (1 << ScalaParser.T__53) | (1 << ScalaParser.T__54) | (1 << ScalaParser.T__55) | (1 << ScalaParser.T__56) | (1 << ScalaParser.T__57) | (1 << ScalaParser.T__58) | (1 << ScalaParser.Id) | (1 << ScalaParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)))) != 0)):
                    break

            self.state = 1037
            self.match(ScalaParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_(self):
            return self.getTypedRuleContext(ScalaParser.Import_Context,0)


        def def_(self):
            return self.getTypedRuleContext(ScalaParser.Def_Context,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotationContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ModifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.NL)
            else:
                return self.getToken(ScalaParser.NL, i)

        def dcl(self):
            return self.getTypedRuleContext(ScalaParser.DclContext,0)


        def expr(self):
            return self.getTypedRuleContext(ScalaParser.ExprContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_templateStat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStat" ):
                listener.enterTemplateStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStat" ):
                listener.exitTemplateStat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateStat" ):
                return visitor.visitTemplateStat(self)
            else:
                return visitor.visitChildren(self)




    def templateStat(self):

        localctx = ScalaParser.TemplateStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_templateStat)
        self._la = 0 # Token type
        try:
            self.state = 1073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.import_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScalaParser.T__43:
                    self.state = 1040
                    self.annotation()
                    self.state = 1042
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ScalaParser.NL:
                        self.state = 1041
                        self.match(ScalaParser.NL)


                    self.state = 1048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__21) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__48) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51) | (1 << ScalaParser.T__52) | (1 << ScalaParser.T__53))) != 0):
                    self.state = 1049
                    self.modifier()
                    self.state = 1054
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1055
                self.def_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScalaParser.T__43:
                    self.state = 1056
                    self.annotation()
                    self.state = 1058
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ScalaParser.NL:
                        self.state = 1057
                        self.match(ScalaParser.NL)


                    self.state = 1064
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__21) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__48) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51) | (1 << ScalaParser.T__52) | (1 << ScalaParser.T__53))) != 0):
                    self.state = 1065
                    self.modifier()
                    self.state = 1070
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1071
                self.dcl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1072
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelfTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_selfType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelfType" ):
                listener.enterSelfType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelfType" ):
                listener.exitSelfType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelfType" ):
                return visitor.visitSelfType(self)
            else:
                return visitor.visitChildren(self)




    def selfType(self):

        localctx = ScalaParser.SelfTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_selfType)
        self._la = 0 # Token type
        try:
            self.state = 1086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScalaParser.Id]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1075
                self.match(ScalaParser.Id)
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__18:
                    self.state = 1076
                    self.match(ScalaParser.T__18)
                    self.state = 1077
                    self.type_()


                self.state = 1080
                self.match(ScalaParser.T__8)
                pass
            elif token in [ScalaParser.T__4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1081
                self.match(ScalaParser.T__4)
                self.state = 1082
                self.match(ScalaParser.T__18)
                self.state = 1083
                self.type_()
                self.state = 1084
                self.match(ScalaParser.T__8)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ImportExprContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ImportExprContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_import_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_" ):
                listener.enterImport_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_" ):
                listener.exitImport_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_" ):
                return visitor.visitImport_(self)
            else:
                return visitor.visitChildren(self)




    def import_(self):

        localctx = ScalaParser.Import_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_import_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(ScalaParser.T__54)
            self.state = 1089
            self.importExpr()
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__3:
                self.state = 1090
                self.match(ScalaParser.T__3)
                self.state = 1091
                self.importExpr()
                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stableId(self):
            return self.getTypedRuleContext(ScalaParser.StableIdContext,0)


        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def importSelectors(self):
            return self.getTypedRuleContext(ScalaParser.ImportSelectorsContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_importExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportExpr" ):
                listener.enterImportExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportExpr" ):
                listener.exitImportExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportExpr" ):
                return visitor.visitImportExpr(self)
            else:
                return visitor.visitChildren(self)




    def importExpr(self):

        localctx = ScalaParser.ImportExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_importExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self.stableId(0)
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__2:
                self.state = 1098
                self.match(ScalaParser.T__2)
                self.state = 1102
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ScalaParser.Id]:
                    self.state = 1099
                    self.match(ScalaParser.Id)
                    pass
                elif token in [ScalaParser.T__19]:
                    self.state = 1100
                    self.match(ScalaParser.T__19)
                    pass
                elif token in [ScalaParser.T__12]:
                    self.state = 1101
                    self.importSelectors()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportSelectorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importSelector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ImportSelectorContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ImportSelectorContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_importSelectors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportSelectors" ):
                listener.enterImportSelectors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportSelectors" ):
                listener.exitImportSelectors(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportSelectors" ):
                return visitor.visitImportSelectors(self)
            else:
                return visitor.visitChildren(self)




    def importSelectors(self):

        localctx = ScalaParser.ImportSelectorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_importSelectors)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(ScalaParser.T__12)
            self.state = 1112
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1107
                    self.importSelector()
                    self.state = 1108
                    self.match(ScalaParser.T__3) 
                self.state = 1114
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScalaParser.Id]:
                self.state = 1115
                self.importSelector()
                pass
            elif token in [ScalaParser.T__19]:
                self.state = 1116
                self.match(ScalaParser.T__19)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1119
            self.match(ScalaParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.Id)
            else:
                return self.getToken(ScalaParser.Id, i)

        def getRuleIndex(self):
            return ScalaParser.RULE_importSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportSelector" ):
                listener.enterImportSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportSelector" ):
                listener.exitImportSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportSelector" ):
                return visitor.visitImportSelector(self)
            else:
                return visitor.visitChildren(self)




    def importSelector(self):

        localctx = ScalaParser.ImportSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_importSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(ScalaParser.Id)
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__8:
                self.state = 1122
                self.match(ScalaParser.T__8)
                self.state = 1123
                _la = self._input.LA(1)
                if not(_la==ScalaParser.T__19 or _la==ScalaParser.Id):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valDcl(self):
            return self.getTypedRuleContext(ScalaParser.ValDclContext,0)


        def varDcl(self):
            return self.getTypedRuleContext(ScalaParser.VarDclContext,0)


        def funDcl(self):
            return self.getTypedRuleContext(ScalaParser.FunDclContext,0)


        def typeDcl(self):
            return self.getTypedRuleContext(ScalaParser.TypeDclContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.NL)
            else:
                return self.getToken(ScalaParser.NL, i)

        def getRuleIndex(self):
            return ScalaParser.RULE_dcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDcl" ):
                listener.enterDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDcl" ):
                listener.exitDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDcl" ):
                return visitor.visitDcl(self)
            else:
                return visitor.visitChildren(self)




    def dcl(self):

        localctx = ScalaParser.DclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dcl)
        self._la = 0 # Token type
        try:
            self.state = 1140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScalaParser.T__15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1126
                self.match(ScalaParser.T__15)
                self.state = 1127
                self.valDcl()
                pass
            elif token in [ScalaParser.T__47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1128
                self.match(ScalaParser.T__47)
                self.state = 1129
                self.varDcl()
                pass
            elif token in [ScalaParser.T__55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1130
                self.match(ScalaParser.T__55)
                self.state = 1131
                self.funDcl()
                pass
            elif token in [ScalaParser.T__14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1132
                self.match(ScalaParser.T__14)
                self.state = 1136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScalaParser.NL:
                    self.state = 1133
                    self.match(ScalaParser.NL)
                    self.state = 1138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1139
                self.typeDcl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ids(self):
            return self.getTypedRuleContext(ScalaParser.IdsContext,0)


        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_valDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValDcl" ):
                listener.enterValDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValDcl" ):
                listener.exitValDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValDcl" ):
                return visitor.visitValDcl(self)
            else:
                return visitor.visitChildren(self)




    def valDcl(self):

        localctx = ScalaParser.ValDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_valDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.ids()
            self.state = 1143
            self.match(ScalaParser.T__18)
            self.state = 1144
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ids(self):
            return self.getTypedRuleContext(ScalaParser.IdsContext,0)


        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_varDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDcl" ):
                listener.enterVarDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDcl" ):
                listener.exitVarDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDcl" ):
                return visitor.visitVarDcl(self)
            else:
                return visitor.visitChildren(self)




    def varDcl(self):

        localctx = ScalaParser.VarDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_varDcl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.ids()
            self.state = 1147
            self.match(ScalaParser.T__18)
            self.state = 1148
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funSig(self):
            return self.getTypedRuleContext(ScalaParser.FunSigContext,0)


        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_funDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunDcl" ):
                listener.enterFunDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunDcl" ):
                listener.exitFunDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunDcl" ):
                return visitor.visitFunDcl(self)
            else:
                return visitor.visitChildren(self)




    def funDcl(self):

        localctx = ScalaParser.FunDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_funDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.funSig()
            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__18:
                self.state = 1151
                self.match(ScalaParser.T__18)
                self.state = 1152
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunSigContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def paramClauses(self):
            return self.getTypedRuleContext(ScalaParser.ParamClausesContext,0)


        def funTypeParamClause(self):
            return self.getTypedRuleContext(ScalaParser.FunTypeParamClauseContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_funSig

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunSig" ):
                listener.enterFunSig(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunSig" ):
                listener.exitFunSig(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunSig" ):
                return visitor.visitFunSig(self)
            else:
                return visitor.visitChildren(self)




    def funSig(self):

        localctx = ScalaParser.FunSigContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_funSig)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.match(ScalaParser.Id)
            self.state = 1157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__6:
                self.state = 1156
                self.funTypeParamClause()


            self.state = 1159
            self.paramClauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def typeParamClause(self):
            return self.getTypedRuleContext(ScalaParser.TypeParamClauseContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.Type_Context)
            else:
                return self.getTypedRuleContext(ScalaParser.Type_Context,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_typeDcl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDcl" ):
                listener.enterTypeDcl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDcl" ):
                listener.exitTypeDcl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDcl" ):
                return visitor.visitTypeDcl(self)
            else:
                return visitor.visitChildren(self)




    def typeDcl(self):

        localctx = ScalaParser.TypeDclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_typeDcl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(ScalaParser.Id)
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__6:
                self.state = 1162
                self.typeParamClause()


            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__44:
                self.state = 1165
                self.match(ScalaParser.T__44)
                self.state = 1166
                self.type_()


            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__45:
                self.state = 1169
                self.match(ScalaParser.T__45)
                self.state = 1170
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatVarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patDef(self):
            return self.getTypedRuleContext(ScalaParser.PatDefContext,0)


        def varDef(self):
            return self.getTypedRuleContext(ScalaParser.VarDefContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_patVarDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatVarDef" ):
                listener.enterPatVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatVarDef" ):
                listener.exitPatVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatVarDef" ):
                return visitor.visitPatVarDef(self)
            else:
                return visitor.visitChildren(self)




    def patVarDef(self):

        localctx = ScalaParser.PatVarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_patVarDef)
        try:
            self.state = 1177
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScalaParser.T__15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1173
                self.match(ScalaParser.T__15)
                self.state = 1174
                self.patDef()
                pass
            elif token in [ScalaParser.T__47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1175
                self.match(ScalaParser.T__47)
                self.state = 1176
                self.varDef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patVarDef(self):
            return self.getTypedRuleContext(ScalaParser.PatVarDefContext,0)


        def funDef(self):
            return self.getTypedRuleContext(ScalaParser.FunDefContext,0)


        def typeDef(self):
            return self.getTypedRuleContext(ScalaParser.TypeDefContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.NL)
            else:
                return self.getToken(ScalaParser.NL, i)

        def tmplDef(self):
            return self.getTypedRuleContext(ScalaParser.TmplDefContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_def_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_" ):
                listener.enterDef_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_" ):
                listener.exitDef_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_" ):
                return visitor.visitDef_(self)
            else:
                return visitor.visitChildren(self)




    def def_(self):

        localctx = ScalaParser.Def_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_def_)
        self._la = 0 # Token type
        try:
            self.state = 1191
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScalaParser.T__15, ScalaParser.T__47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1179
                self.patVarDef()
                pass
            elif token in [ScalaParser.T__55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1180
                self.match(ScalaParser.T__55)
                self.state = 1181
                self.funDef()
                pass
            elif token in [ScalaParser.T__14]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1182
                self.match(ScalaParser.T__14)
                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScalaParser.NL:
                    self.state = 1183
                    self.match(ScalaParser.NL)
                    self.state = 1188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1189
                self.typeDef()
                pass
            elif token in [ScalaParser.T__41, ScalaParser.T__56, ScalaParser.T__57, ScalaParser.T__58]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1190
                self.tmplDef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.Pattern2Context)
            else:
                return self.getTypedRuleContext(ScalaParser.Pattern2Context,i)


        def expr(self):
            return self.getTypedRuleContext(ScalaParser.ExprContext,0)


        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_patDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatDef" ):
                listener.enterPatDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatDef" ):
                listener.exitPatDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatDef" ):
                return visitor.visitPatDef(self)
            else:
                return visitor.visitChildren(self)




    def patDef(self):

        localctx = ScalaParser.PatDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_patDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.pattern2()
            self.state = 1198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__3:
                self.state = 1194
                self.match(ScalaParser.T__3)
                self.state = 1195
                self.pattern2()
                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__18:
                self.state = 1201
                self.match(ScalaParser.T__18)
                self.state = 1202
                self.type_()


            self.state = 1205
            self.match(ScalaParser.T__33)
            self.state = 1206
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patDef(self):
            return self.getTypedRuleContext(ScalaParser.PatDefContext,0)


        def ids(self):
            return self.getTypedRuleContext(ScalaParser.IdsContext,0)


        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = ScalaParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_varDef)
        try:
            self.state = 1215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1208
                self.patDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.ids()
                self.state = 1210
                self.match(ScalaParser.T__18)
                self.state = 1211
                self.type_()
                self.state = 1212
                self.match(ScalaParser.T__33)
                self.state = 1213
                self.match(ScalaParser.T__19)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funSig(self):
            return self.getTypedRuleContext(ScalaParser.FunSigContext,0)


        def expr(self):
            return self.getTypedRuleContext(ScalaParser.ExprContext,0)


        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def block(self):
            return self.getTypedRuleContext(ScalaParser.BlockContext,0)


        def NL(self):
            return self.getToken(ScalaParser.NL, 0)

        def paramClause(self):
            return self.getTypedRuleContext(ScalaParser.ParamClauseContext,0)


        def paramClauses(self):
            return self.getTypedRuleContext(ScalaParser.ParamClausesContext,0)


        def constrExpr(self):
            return self.getTypedRuleContext(ScalaParser.ConstrExprContext,0)


        def constrBlock(self):
            return self.getTypedRuleContext(ScalaParser.ConstrBlockContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_funDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunDef" ):
                listener.enterFunDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunDef" ):
                listener.exitFunDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunDef" ):
                return visitor.visitFunDef(self)
            else:
                return visitor.visitChildren(self)




    def funDef(self):

        localctx = ScalaParser.FunDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_funDef)
        self._la = 0 # Token type
        try:
            self.state = 1244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1217
                self.funSig()
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__18:
                    self.state = 1218
                    self.match(ScalaParser.T__18)
                    self.state = 1219
                    self.type_()


                self.state = 1222
                self.match(ScalaParser.T__33)
                self.state = 1223
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1225
                self.funSig()
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.NL:
                    self.state = 1226
                    self.match(ScalaParser.NL)


                self.state = 1229
                self.match(ScalaParser.T__12)
                self.state = 1230
                self.block()
                self.state = 1231
                self.match(ScalaParser.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1233
                self.match(ScalaParser.T__4)
                self.state = 1234
                self.paramClause()
                self.state = 1235
                self.paramClauses()
                self.state = 1242
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ScalaParser.T__33]:
                    self.state = 1236
                    self.match(ScalaParser.T__33)
                    self.state = 1237
                    self.constrExpr()
                    pass
                elif token in [ScalaParser.T__12, ScalaParser.NL]:
                    self.state = 1239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ScalaParser.NL:
                        self.state = 1238
                        self.match(ScalaParser.NL)


                    self.state = 1241
                    self.constrBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def type_(self):
            return self.getTypedRuleContext(ScalaParser.Type_Context,0)


        def typeParamClause(self):
            return self.getTypedRuleContext(ScalaParser.TypeParamClauseContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDef" ):
                return visitor.visitTypeDef(self)
            else:
                return visitor.visitChildren(self)




    def typeDef(self):

        localctx = ScalaParser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_typeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.match(ScalaParser.Id)
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__6:
                self.state = 1247
                self.typeParamClause()


            self.state = 1250
            self.match(ScalaParser.T__33)
            self.state = 1251
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TmplDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDef(self):
            return self.getTypedRuleContext(ScalaParser.ClassDefContext,0)


        def objectDef(self):
            return self.getTypedRuleContext(ScalaParser.ObjectDefContext,0)


        def traitDef(self):
            return self.getTypedRuleContext(ScalaParser.TraitDefContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_tmplDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTmplDef" ):
                listener.enterTmplDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTmplDef" ):
                listener.exitTmplDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTmplDef" ):
                return visitor.visitTmplDef(self)
            else:
                return visitor.visitChildren(self)




    def tmplDef(self):

        localctx = ScalaParser.TmplDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_tmplDef)
        self._la = 0 # Token type
        try:
            self.state = 1265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__41:
                    self.state = 1253
                    self.match(ScalaParser.T__41)


                self.state = 1256
                self.match(ScalaParser.T__56)
                self.state = 1257
                self.classDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.T__41:
                    self.state = 1258
                    self.match(ScalaParser.T__41)


                self.state = 1261
                self.match(ScalaParser.T__57)
                self.state = 1262
                self.objectDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1263
                self.match(ScalaParser.T__58)
                self.state = 1264
                self.traitDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def classParamClauses(self):
            return self.getTypedRuleContext(ScalaParser.ClassParamClausesContext,0)


        def classTemplateOpt(self):
            return self.getTypedRuleContext(ScalaParser.ClassTemplateOptContext,0)


        def typeParamClause(self):
            return self.getTypedRuleContext(ScalaParser.TypeParamClauseContext,0)


        def constrAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ConstrAnnotationContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ConstrAnnotationContext,i)


        def accessModifier(self):
            return self.getTypedRuleContext(ScalaParser.AccessModifierContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_classDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDef" ):
                listener.enterClassDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDef" ):
                listener.exitClassDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDef" ):
                return visitor.visitClassDef(self)
            else:
                return visitor.visitChildren(self)




    def classDef(self):

        localctx = ScalaParser.ClassDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_classDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(ScalaParser.Id)
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__6:
                self.state = 1268
                self.typeParamClause()


            self.state = 1274
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1271
                    self.constrAnnotation() 
                self.state = 1276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

            self.state = 1278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1277
                self.accessModifier()


            self.state = 1280
            self.classParamClauses()
            self.state = 1281
            self.classTemplateOpt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def traitTemplateOpt(self):
            return self.getTypedRuleContext(ScalaParser.TraitTemplateOptContext,0)


        def typeParamClause(self):
            return self.getTypedRuleContext(ScalaParser.TypeParamClauseContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_traitDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitDef" ):
                listener.enterTraitDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitDef" ):
                listener.exitTraitDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitDef" ):
                return visitor.visitTraitDef(self)
            else:
                return visitor.visitChildren(self)




    def traitDef(self):

        localctx = ScalaParser.TraitDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_traitDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(ScalaParser.Id)
            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__6:
                self.state = 1284
                self.typeParamClause()


            self.state = 1287
            self.traitTemplateOpt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Id(self):
            return self.getToken(ScalaParser.Id, 0)

        def classTemplateOpt(self):
            return self.getTypedRuleContext(ScalaParser.ClassTemplateOptContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_objectDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDef" ):
                listener.enterObjectDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDef" ):
                listener.exitObjectDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectDef" ):
                return visitor.visitObjectDef(self)
            else:
                return visitor.visitChildren(self)




    def objectDef(self):

        localctx = ScalaParser.ObjectDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_objectDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(ScalaParser.Id)
            self.state = 1290
            self.classTemplateOpt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTemplateOptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classTemplate(self):
            return self.getTypedRuleContext(ScalaParser.ClassTemplateContext,0)


        def templateBody(self):
            return self.getTypedRuleContext(ScalaParser.TemplateBodyContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_classTemplateOpt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTemplateOpt" ):
                listener.enterClassTemplateOpt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTemplateOpt" ):
                listener.exitClassTemplateOpt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTemplateOpt" ):
                return visitor.visitClassTemplateOpt(self)
            else:
                return visitor.visitChildren(self)




    def classTemplateOpt(self):

        localctx = ScalaParser.ClassTemplateOptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_classTemplateOpt)
        self._la = 0 # Token type
        try:
            self.state = 1300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1292
                self.match(ScalaParser.T__59)
                self.state = 1293
                self.classTemplate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1298
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ScalaParser.T__59:
                        self.state = 1294
                        self.match(ScalaParser.T__59)


                    self.state = 1297
                    self.templateBody()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitTemplateOptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traitTemplate(self):
            return self.getTypedRuleContext(ScalaParser.TraitTemplateContext,0)


        def templateBody(self):
            return self.getTypedRuleContext(ScalaParser.TemplateBodyContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_traitTemplateOpt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitTemplateOpt" ):
                listener.enterTraitTemplateOpt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitTemplateOpt" ):
                listener.exitTraitTemplateOpt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitTemplateOpt" ):
                return visitor.visitTraitTemplateOpt(self)
            else:
                return visitor.visitChildren(self)




    def traitTemplateOpt(self):

        localctx = ScalaParser.TraitTemplateOptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_traitTemplateOpt)
        self._la = 0 # Token type
        try:
            self.state = 1310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1302
                self.match(ScalaParser.T__59)
                self.state = 1303
                self.traitTemplate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1308
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ScalaParser.T__59:
                        self.state = 1304
                        self.match(ScalaParser.T__59)


                    self.state = 1307
                    self.templateBody()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTemplateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classParents(self):
            return self.getTypedRuleContext(ScalaParser.ClassParentsContext,0)


        def earlyDefs(self):
            return self.getTypedRuleContext(ScalaParser.EarlyDefsContext,0)


        def templateBody(self):
            return self.getTypedRuleContext(ScalaParser.TemplateBodyContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_classTemplate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTemplate" ):
                listener.enterClassTemplate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTemplate" ):
                listener.exitClassTemplate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTemplate" ):
                return visitor.visitClassTemplate(self)
            else:
                return visitor.visitChildren(self)




    def classTemplate(self):

        localctx = ScalaParser.ClassTemplateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_classTemplate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__12:
                self.state = 1312
                self.earlyDefs()


            self.state = 1315
            self.classParents()
            self.state = 1317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1316
                self.templateBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitTemplateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traitParents(self):
            return self.getTypedRuleContext(ScalaParser.TraitParentsContext,0)


        def earlyDefs(self):
            return self.getTypedRuleContext(ScalaParser.EarlyDefsContext,0)


        def templateBody(self):
            return self.getTypedRuleContext(ScalaParser.TemplateBodyContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_traitTemplate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitTemplate" ):
                listener.enterTraitTemplate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitTemplate" ):
                listener.exitTraitTemplate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitTemplate" ):
                return visitor.visitTraitTemplate(self)
            else:
                return visitor.visitChildren(self)




    def traitTemplate(self):

        localctx = ScalaParser.TraitTemplateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_traitTemplate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.T__12:
                self.state = 1319
                self.earlyDefs()


            self.state = 1322
            self.traitParents()
            self.state = 1324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1323
                self.templateBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constr(self):
            return self.getTypedRuleContext(ScalaParser.ConstrContext,0)


        def annotType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotTypeContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotTypeContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_classParents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParents" ):
                listener.enterClassParents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParents" ):
                listener.exitClassParents(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassParents" ):
                return visitor.visitClassParents(self)
            else:
                return visitor.visitChildren(self)




    def classParents(self):

        localctx = ScalaParser.ClassParentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_classParents)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.constr()
            self.state = 1331
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1327
                    self.match(ScalaParser.T__16)
                    self.state = 1328
                    self.annotType() 
                self.state = 1333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitParentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotTypeContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotTypeContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_traitParents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitParents" ):
                listener.enterTraitParents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitParents" ):
                listener.exitTraitParents(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitParents" ):
                return visitor.visitTraitParents(self)
            else:
                return visitor.visitChildren(self)




    def traitParents(self):

        localctx = ScalaParser.TraitParentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_traitParents)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.annotType()
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__16:
                self.state = 1335
                self.match(ScalaParser.T__16)
                self.state = 1336
                self.annotType()
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotType(self):
            return self.getTypedRuleContext(ScalaParser.AnnotTypeContext,0)


        def argumentExprs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ArgumentExprsContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ArgumentExprsContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_constr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstr" ):
                listener.enterConstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstr" ):
                listener.exitConstr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstr" ):
                return visitor.visitConstr(self)
            else:
                return visitor.visitChildren(self)




    def constr(self):

        localctx = ScalaParser.ConstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_constr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.annotType()
            self.state = 1346
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1343
                    self.argumentExprs() 
                self.state = 1348
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EarlyDefsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def earlyDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.EarlyDefContext)
            else:
                return self.getTypedRuleContext(ScalaParser.EarlyDefContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_earlyDefs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEarlyDefs" ):
                listener.enterEarlyDefs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEarlyDefs" ):
                listener.exitEarlyDefs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEarlyDefs" ):
                return visitor.visitEarlyDefs(self)
            else:
                return visitor.visitChildren(self)




    def earlyDefs(self):

        localctx = ScalaParser.EarlyDefsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_earlyDefs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.match(ScalaParser.T__12)
            self.state = 1351 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1350
                self.earlyDef()
                self.state = 1353 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__15) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__43) | (1 << ScalaParser.T__47) | (1 << ScalaParser.T__48) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51) | (1 << ScalaParser.T__52) | (1 << ScalaParser.T__53))) != 0)):
                    break

            self.state = 1355
            self.match(ScalaParser.T__13)
            self.state = 1356
            self.match(ScalaParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EarlyDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patVarDef(self):
            return self.getTypedRuleContext(ScalaParser.PatVarDefContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotationContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ModifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.NL)
            else:
                return self.getToken(ScalaParser.NL, i)

        def getRuleIndex(self):
            return ScalaParser.RULE_earlyDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEarlyDef" ):
                listener.enterEarlyDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEarlyDef" ):
                listener.exitEarlyDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEarlyDef" ):
                return visitor.visitEarlyDef(self)
            else:
                return visitor.visitChildren(self)




    def earlyDef(self):

        localctx = ScalaParser.EarlyDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_earlyDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScalaParser.T__43:
                self.state = 1358
                self.annotation()
                self.state = 1360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ScalaParser.NL:
                    self.state = 1359
                    self.match(ScalaParser.NL)


                self.state = 1366
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__21) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__48) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51) | (1 << ScalaParser.T__52) | (1 << ScalaParser.T__53))) != 0):
                self.state = 1367
                self.modifier()
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1373
            self.patVarDef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selfInvocation(self):
            return self.getTypedRuleContext(ScalaParser.SelfInvocationContext,0)


        def constrBlock(self):
            return self.getTypedRuleContext(ScalaParser.ConstrBlockContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_constrExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstrExpr" ):
                listener.enterConstrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstrExpr" ):
                listener.exitConstrExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstrExpr" ):
                return visitor.visitConstrExpr(self)
            else:
                return visitor.visitChildren(self)




    def constrExpr(self):

        localctx = ScalaParser.ConstrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_constrExpr)
        try:
            self.state = 1377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScalaParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1375
                self.selfInvocation()
                pass
            elif token in [ScalaParser.T__12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1376
                self.constrBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstrBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selfInvocation(self):
            return self.getTypedRuleContext(ScalaParser.SelfInvocationContext,0)


        def blockStat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.BlockStatContext)
            else:
                return self.getTypedRuleContext(ScalaParser.BlockStatContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_constrBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstrBlock" ):
                listener.enterConstrBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstrBlock" ):
                listener.exitConstrBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstrBlock" ):
                return visitor.visitConstrBlock(self)
            else:
                return visitor.visitChildren(self)




    def constrBlock(self):

        localctx = ScalaParser.ConstrBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_constrBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(ScalaParser.T__12)
            self.state = 1380
            self.selfInvocation()
            self.state = 1384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__0) | (1 << ScalaParser.T__1) | (1 << ScalaParser.T__4) | (1 << ScalaParser.T__5) | (1 << ScalaParser.T__9) | (1 << ScalaParser.T__12) | (1 << ScalaParser.T__14) | (1 << ScalaParser.T__15) | (1 << ScalaParser.T__19) | (1 << ScalaParser.T__21) | (1 << ScalaParser.T__22) | (1 << ScalaParser.T__24) | (1 << ScalaParser.T__25) | (1 << ScalaParser.T__28) | (1 << ScalaParser.T__29) | (1 << ScalaParser.T__31) | (1 << ScalaParser.T__32) | (1 << ScalaParser.T__35) | (1 << ScalaParser.T__36) | (1 << ScalaParser.T__37) | (1 << ScalaParser.T__38) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__41) | (1 << ScalaParser.T__43) | (1 << ScalaParser.T__47) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51) | (1 << ScalaParser.T__54) | (1 << ScalaParser.T__55) | (1 << ScalaParser.T__56) | (1 << ScalaParser.T__57) | (1 << ScalaParser.T__58) | (1 << ScalaParser.Id) | (1 << ScalaParser.BooleanLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScalaParser.CharacterLiteral - 64)) | (1 << (ScalaParser.SymbolLiteral - 64)) | (1 << (ScalaParser.IntegerLiteral - 64)) | (1 << (ScalaParser.StringLiteral - 64)) | (1 << (ScalaParser.FloatingPointLiteral - 64)))) != 0):
                self.state = 1381
                self.blockStat()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1387
            self.match(ScalaParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelfInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExprs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ArgumentExprsContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ArgumentExprsContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_selfInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelfInvocation" ):
                listener.enterSelfInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelfInvocation" ):
                listener.exitSelfInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelfInvocation" ):
                return visitor.visitSelfInvocation(self)
            else:
                return visitor.visitChildren(self)




    def selfInvocation(self):

        localctx = ScalaParser.SelfInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_selfInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.match(ScalaParser.T__4)
            self.state = 1391 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1390
                    self.argumentExprs()

                else:
                    raise NoViableAltException(self)
                self.state = 1393 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopStatSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topStat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.TopStatContext)
            else:
                return self.getTypedRuleContext(ScalaParser.TopStatContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_topStatSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopStatSeq" ):
                listener.enterTopStatSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopStatSeq" ):
                listener.exitTopStatSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopStatSeq" ):
                return visitor.visitTopStatSeq(self)
            else:
                return visitor.visitChildren(self)




    def topStatSeq(self):

        localctx = ScalaParser.TopStatSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_topStatSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1396 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1395
                self.topStat()
                self.state = 1398 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__21) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__41) | (1 << ScalaParser.T__43) | (1 << ScalaParser.T__48) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51) | (1 << ScalaParser.T__52) | (1 << ScalaParser.T__53) | (1 << ScalaParser.T__54) | (1 << ScalaParser.T__56) | (1 << ScalaParser.T__57) | (1 << ScalaParser.T__58) | (1 << ScalaParser.T__60))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopStatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tmplDef(self):
            return self.getTypedRuleContext(ScalaParser.TmplDefContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(ScalaParser.AnnotationContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ScalaParser.ModifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScalaParser.NL)
            else:
                return self.getToken(ScalaParser.NL, i)

        def import_(self):
            return self.getTypedRuleContext(ScalaParser.Import_Context,0)


        def packaging(self):
            return self.getTypedRuleContext(ScalaParser.PackagingContext,0)


        def packageObject(self):
            return self.getTypedRuleContext(ScalaParser.PackageObjectContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_topStat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopStat" ):
                listener.enterTopStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopStat" ):
                listener.exitTopStat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopStat" ):
                return visitor.visitTopStat(self)
            else:
                return visitor.visitChildren(self)




    def topStat(self):

        localctx = ScalaParser.TopStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_topStat)
        self._la = 0 # Token type
        try:
            self.state = 1419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScalaParser.T__43:
                    self.state = 1400
                    self.annotation()
                    self.state = 1402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ScalaParser.NL:
                        self.state = 1401
                        self.match(ScalaParser.NL)


                    self.state = 1408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScalaParser.T__21) | (1 << ScalaParser.T__39) | (1 << ScalaParser.T__48) | (1 << ScalaParser.T__49) | (1 << ScalaParser.T__50) | (1 << ScalaParser.T__51) | (1 << ScalaParser.T__52) | (1 << ScalaParser.T__53))) != 0):
                    self.state = 1409
                    self.modifier()
                    self.state = 1414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1415
                self.tmplDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1416
                self.import_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1417
                self.packaging()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1418
                self.packageObject()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackagingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualId(self):
            return self.getTypedRuleContext(ScalaParser.QualIdContext,0)


        def topStatSeq(self):
            return self.getTypedRuleContext(ScalaParser.TopStatSeqContext,0)


        def NL(self):
            return self.getToken(ScalaParser.NL, 0)

        def getRuleIndex(self):
            return ScalaParser.RULE_packaging

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackaging" ):
                listener.enterPackaging(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackaging" ):
                listener.exitPackaging(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackaging" ):
                return visitor.visitPackaging(self)
            else:
                return visitor.visitChildren(self)




    def packaging(self):

        localctx = ScalaParser.PackagingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_packaging)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.match(ScalaParser.T__60)
            self.state = 1422
            self.qualId()
            self.state = 1424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScalaParser.NL:
                self.state = 1423
                self.match(ScalaParser.NL)


            self.state = 1426
            self.match(ScalaParser.T__12)
            self.state = 1427
            self.topStatSeq()
            self.state = 1428
            self.match(ScalaParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def objectDef(self):
            return self.getTypedRuleContext(ScalaParser.ObjectDefContext,0)


        def getRuleIndex(self):
            return ScalaParser.RULE_packageObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageObject" ):
                listener.enterPackageObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageObject" ):
                listener.exitPackageObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageObject" ):
                return visitor.visitPackageObject(self)
            else:
                return visitor.visitChildren(self)




    def packageObject(self):

        localctx = ScalaParser.PackageObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_packageObject)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.match(ScalaParser.T__60)
            self.state = 1431
            self.match(ScalaParser.T__57)
            self.state = 1432
            self.objectDef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topStatSeq(self):
            return self.getTypedRuleContext(ScalaParser.TopStatSeqContext,0)


        def qualId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScalaParser.QualIdContext)
            else:
                return self.getTypedRuleContext(ScalaParser.QualIdContext,i)


        def getRuleIndex(self):
            return ScalaParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = ScalaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_compilationUnit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1434
                    self.match(ScalaParser.T__60)
                    self.state = 1435
                    self.qualId() 
                self.state = 1440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

            self.state = 1441
            self.topStatSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[3] = self.stableId_sempred
        self._predicates[12] = self.simpleType_sempred
        self._predicates[23] = self.infixExpr_sempred
        self._predicates[26] = self.simpleExpr1_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def stableId_sempred(self, localctx:StableIdContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def simpleType_sempred(self, localctx:SimpleTypeContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 3)
         

    def infixExpr_sempred(self, localctx:InfixExprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def simpleExpr1_sempred(self, localctx:SimpleExpr1Context, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         




