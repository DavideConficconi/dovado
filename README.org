* Table of Contents
  :PROPERTIES:
  :CUSTOM_ID: table-of-contents
  :END:

1. [[#org648fc4e][Installation]]
2. [[#org4d8ab18][Usage]]

   1. [[#org023397d][Defining Custom Metrics]]
   2. [[#orge369aa6][Examples]]

      1. [[#orgcb021dc][neorv32 (VHDL)]]
      2. [[#org9b66d30][corundum (VERILOG)]]
      3. [[#orgbda061b][cv32e40p (SYSTEM-VERILOG)]]

DoVado is a RTL design automation and exploration CLI tool.

* Installation
  :PROPERTIES:
  :CUSTOM_ID: installation
  :END:
DoVado needs python 3.6 or higher. Install it through pip, on many Linux
systems use pip3 to force python 3 installation.

#+begin_example
  pip3 install --user --no-cache dovado-rtl
#+end_example

* Usage
  :PROPERTIES:
  :CUSTOM_ID: usage
  :END:
Dovado has two modes:

- points: design automation mode in which a file containing parameter
  values must be given and a file containing all the evaluations is
  returned for some given metrics,
- space: design exploration mode in which parameters and their ranges
  must be given together with some target metrics and the pareto set of
  design points with respect to the given metrics is returned.

#+begin_html
  <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
#+end_html

#+begin_html
  <caption class="t-above">
#+end_html

Table 1: dovado general parameters

#+begin_html
  </caption>
#+end_html

#+begin_html
  <colgroup>
#+end_html

#+begin_html
  <col  class="org-left" />
#+end_html

#+begin_html
  <col  class="org-left" />
#+end_html

#+begin_html
  <col  class="org-left" />
#+end_html

#+begin_html
  </colgroup>
#+end_html

#+begin_html
  <thead>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th scope="col" class="org-left">
#+end_html

parameter

#+begin_html
  </th>
#+end_html

#+begin_html
  <th scope="col" class="org-left">
#+end_html

description

#+begin_html
  </th>
#+end_html

#+begin_html
  <th scope="col" class="org-left">
#+end_html

mandatory

#+begin_html
  </th>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  </thead>
#+end_html

#+begin_html
  <tbody>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--file-path

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

path to the target file

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

yes

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--board

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

vivado descriptor of a board

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

yes

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--parameters

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

parameters to use either for points/space (integers and booleans
supported)

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

yes

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--clock-port

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

RTL identifier of the clock port

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

yes

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--implementation

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

switch to evaluate designs after implementation (default is after
synthesis)

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--incremental

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

switch to use incremental synthesis/implementation

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--directives

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

list of directives to pass to synthesis, place and route (default is
RuntimeOptimized for all three)

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--target-clock

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

clock (Mhz) to give as a constraint to Vivado (default=1000)

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--metrics

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

list of metrics to target using their integer identifier (default mode
is interactive, you will be asked after first synthesis/implementation)

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

 

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

 

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

 

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  </tbody>
#+end_html

#+begin_html
  </table>
#+end_html

After those parameters specify points/space both these modes take an
argument:

- points argument: specify the path to the csv file containing the
  design points to be analyzed. The csv file must contain on each line
  the value for each of the parameters stated through --parameters in
  the same order,
- space argument: a list of ranges stated as 1 2 3 4 where this way we
  would be defining two ranges (1, 2) for the first parameter and (3, 4)
  for the second parameter

No further parameters can be passed to points

#+begin_html
  <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
#+end_html

#+begin_html
  <colgroup>
#+end_html

#+begin_html
  <col  class="org-left" />
#+end_html

#+begin_html
  <col  class="org-left" />
#+end_html

#+begin_html
  <col  class="org-left" />
#+end_html

#+begin_html
  </colgroup>
#+end_html

#+begin_html
  <thead>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <th scope="col" class="org-left">
#+end_html

parameter

#+begin_html
  </th>
#+end_html

#+begin_html
  <th scope="col" class="org-left">
#+end_html

description

#+begin_html
  </th>
#+end_html

#+begin_html
  <th scope="col" class="org-left">
#+end_html

mandatory

#+begin_html
  </th>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  </thead>
#+end_html

#+begin_html
  <tbody>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--power-of-2

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

list of 'y/n' to state whether a parameter must be explored stepping
power of 2s

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--param-initial-values

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

parameter values which are guaranteed to be synthesizable to retrieve
metric mapping

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--optimization-runtime

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

set as a termination condition a timeout as hh:mm:ss

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--read-design-values

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

read design values from a csv

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--disable-approximate

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

disable approximation

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--estimation-model

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

choose Hoeffding Adaptive Tree (default) or Kernel Ridge regressor or
Shadow to not use the controller but log anyways

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--controller-model

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

choose Mab or Distance-based (default) controller

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--disable-controller-mab-weight

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

disable loss weighting in distance controller

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  <tr>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

--n-controllers

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

set the number of voting controllers (default is 500, too high for many
applications)

#+begin_html
  </td>
#+end_html

#+begin_html
  <td class="org-left">
#+end_html

no

#+begin_html
  </td>
#+end_html

#+begin_html
  </tr>
#+end_html

#+begin_html
  </tbody>
#+end_html

#+begin_html
  </table>
#+end_html

Directory structure is vital for the functioning of the tool:

- VHDL: if a package is used the corresponding folder must be named
  exactly as the package; if one wants to analyse a module in a project
  with multiple packages each file belonging to a given package must
  reside in a subfolder with the same name as the package it belongs to:

  - package-name (top folder must have the name of the top package if it
    exists or any name if it does not exist)

    - file-1 (belonging to package-name)
    - file-2 (belonging to package-name)
    - subpackage1-name

      - file-1 (belonging to subpackage-name)
      - file-2 (belonging to subpackage-name)
      - ...

    - subpackage2-name

      - ...

    - ...

- VERILOG/SYSTEM-VERILOG: include directives are not supported all files
  must be in the same folder, no subfolders allowed; no import package
  allowed.

** Defining Custom Metrics
   :PROPERTIES:
   :CUSTOM_ID: defining-custom-metrics
   :END:
Procedure:

1. Create a folder named =custom_metrics= in the same folder where you
   are running dovado

   #+begin_example
     mkdir custom_metrics
   #+end_example

2. Create the *python* file which will contain your custom metric

   #+begin_example
     touch test_metric.py
   #+end_example

3. Write your metric function, any function you need to carry out the
   computation and any import for the libraries

   #+begin_example
     # here any import works
     # e.g. import numpy as np
     import numpy as np


     def test_metric(**kwargs) -> float:
         # only one metric per file is admitted
         # if you want another custom metric create a new file
         print(kwargs)
         return float(__helper_function(kwargs["frequency"]))


     def __helper_function(a):
         # Care the underscores '__' are mandatory for helper functions
         # This function won't show as a metric is here only for helping purposes
         return a + 1000
   #+end_example

4. Run dovado without metric selected:

   #+begin_example
     dovado --file-path <path to "neorv32/rtl/neorv32/neorv32_top.vhd"> --board xc7k70tfbv676-1 --parameters MEM_INT_IMEM_SIZE --parameters MEM_INT_DMEM_SIZE --clock-port clk_i space 16384 131072 8129 65536 --power-of-2 y --power-of-2 y
   #+end_example

5. Select your metrics, you will now find your custom metrics after all
   utilisation metrics provided by your board of choice:
   [[./readme_resources/metrics_selection.png]]

General advice:

- the function must return float (*highly recommended* to annotate the
  return type)

- all helper functions must start with double underscore “__”

- relative imports are not supported, use only absolute imports

- all subfolders of “custommetrics” are ignored.

- from the **kwargs you can access all the other board metrics and the
  frequency by using either “frequency” or the name you find above e.g:

  #+begin_example
    kwargs["frequency"]
    kwargs["Slice LUTs*"]
  #+end_example

** Examples
   :PROPERTIES:
   :CUSTOM_ID: examples
   :END:

*** neorv32 (VHDL)
    :PROPERTIES:
    :CUSTOM_ID: neorv32-vhdl
    :END:
#+begin_example
  git clone https://github.com/stnolting/neorv32
  cd neorv32/rtl
  mv core neorv32
#+end_example

Changing the name of the core folder, which contains all vhdl files, to
the name of the package which is used along the files is mandatory to
make dovado get 'use' directives right. Exploring the parameter space of
the top module:

#+begin_example
  dovado --file-path <path to "neorv32/rtl/neorv32/neorv32_top.vhd"> --board xc7k70tfbv676-1 --parameters MEM_INT_IMEM_SIZE --parameters MEM_INT_DMEM_SIZE --clock-port clk_i --metrics 0 --metrics 1 --metrics 4 --metrics 9 space 16384 131072 8129 65536 --power-of-2 y --power-of-2 y
#+end_example

Above we are optimizing two memory parameters (MEMINTIMEMSIZE,
MEMINTDMEMSIZE) with clki as the clock port with metrics chosen:

- frequency (0)
- LUT occupation (1)
- REGISTER occupation (4)
- BRAM occupation (9)

Ranges are specified after space and we also specify that we want to
search only among power of 2's solutions.

Here an example of *exploring boolean parameters*, the trick here is to
explore them as normal parameters but use as range [0, 1] obviously they
can be mixed up with non-boolean parameters during exploration:

#+begin_example
  dovado --file-path <path to "neorv32/rtl/neorv32/neorv32_top.vhd"> --board xc7k70tfbv676-1 --parameters BOOTLOADER_EN --parameters CPU_EXTENSION_RISCV_A --parameters CPU_EXTENSION_RISCV_B --parameters CPU_EXTENSION_RISCV_C --clock-port clk_i --metrics 0 --metrics 1 --metrics 4 --metrics 9 space 0 1 0 1 0 1 0 1 --disable-approximate
#+end_example

*** corundum (VERILOG)
    :PROPERTIES:
    :CUSTOM_ID: corundum-verilog
    :END:
#+begin_example
  git clone https://github.com/corundum/corundum
  cd corundum/
#+end_example

Exploring the parameter space of the top module:

#+begin_example
  dovado --file-path <path to "corundum/fpga/common/rtl/cpl_queue_manager.v"> --board xc7k70tfbv676-1 --target-clock 100000 --parameters OP_TABLE_SIZE --parameters QUEUE_INDEX_WIDTH --parameters PIPELINE --clock-port clk --metrics 0 --metrics 1 --metrics 4 --metrics 9 space 8 64 4 11 2 32 --disable-approximate
#+end_example

Using *approximation* parameters:

#+begin_example
  dovado --file-path <path to "corundum/fpga/common/rtl/cpl_queue_manager.v"> --board xc7k70tfbv676-1 --target-clock 100000 --parameters OP_TABLE_SIZE --parameters QUEUE_INDEX_WIDTH --parameters PIPELINE --clock-port clk --metrics 0 --metrics 1 --metrics 4 --metrics 9 space 8 64 4 11 2 32 --controller-model Mab --n-controllers 80
#+end_example

*** cv32e40p (SYSTEM-VERILOG)
    :PROPERTIES:
    :CUSTOM_ID: cv32e40p-system-verilog
    :END:
#+begin_example
  git clone https://github.com/openhwgroup/cv32e40p
  cd rtl
  mkdir testing
  cp cv32e40p_fifo.sv testing/
#+end_example

In this project an include directory is used but dovado does not
currently support it thus we create a subfolder, name may be whatever,
where to isolate the module we are interested in studying. This
workaround is only possible if the module one wants to study works
standalone without include directives.

#+begin_example
  dovado --file-path ../../test_projects/cv32e40p/rtl/testing/cv32e40p_fifo.sv --board xc7k70tfbv676-1 --target-clock 100000 --parameters DEPTH --parameters DATA_WIDTH --clock-port clk_i --metrics 0 --metrics 1 --metrics 4 --metrics 9 space 2 4294967296 2 64 --power-of-2 y --power-of-2 y --disable-approximate
#+end_example
